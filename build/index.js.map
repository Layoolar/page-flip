{"version":3,"file":"index.js","sources":["../node_modules/super-paperedflip/src/Page/Page.ts","../node_modules/super-paperedflip/src/Page/ImagePage.ts","../node_modules/super-paperedflip/src/Collection/PageCollection.ts","../node_modules/super-paperedflip/src/Collection/ImagePageCollection.ts","../node_modules/super-paperedflip/src/Helper.ts","../node_modules/super-paperedflip/src/Page/HTMLPage.ts","../node_modules/super-paperedflip/src/Collection/HTMLPageCollection.ts","../node_modules/super-paperedflip/src/Flip/FlipCalculation.ts","../node_modules/super-paperedflip/src/Flip/Flip.ts","../node_modules/super-paperedflip/src/Render/Render.ts","../node_modules/super-paperedflip/src/Render/CanvasRender.ts","../node_modules/super-paperedflip/src/UI/UI.ts","../node_modules/super-paperedflip/src/UI/HTMLUI.ts","../node_modules/super-paperedflip/src/UI/CanvasUI.ts","../node_modules/super-paperedflip/src/Event/EventObject.ts","../node_modules/super-paperedflip/src/Render/HTMLRender.ts","../node_modules/super-paperedflip/src/Settings.ts","../node_modules/style-inject/dist/style-inject.es.js","../node_modules/super-paperedflip/src/PageFlip.ts","../src/html-flip-book/index.tsx"],"sourcesContent":["import { Render } from '../Render/Render';\nimport { Point } from '../BasicTypes';\n\n/**\n * State of the page on the basis of which rendering\n */\nexport interface PageState {\n    /** Page rotation angle */\n    angle: number;\n\n    /** Page scope */\n    area: Point[];\n\n    /** Page position */\n    position: Point;\n\n    /** Rotate angle for hard pages */\n    hardAngle: number;\n\n    /** Rotate angle for hard pages at renedering time */\n    hardDrawingAngle: number;\n}\n\nexport const enum PageOrientation {\n    /** Left side page */\n    LEFT,\n\n    /** Right side page */\n    RIGHT,\n}\n\nexport const enum PageDensity {\n    SOFT = 'soft',\n    HARD = 'hard',\n}\n\n/**\n * Class representing a book page\n */\nexport abstract class Page {\n    /** State of the page on the basis of which rendering */\n    protected state: PageState;\n    /** Render object */\n    protected render: Render;\n\n    /** Page Orientation */\n    protected orientation: PageOrientation;\n\n    /** Density at creation */\n    protected createdDensity: PageDensity;\n    /** Density at the time of rendering (Depends on neighboring pages) */\n    protected nowDrawingDensity: PageDensity;\n\n    protected constructor(render: Render, density: PageDensity) {\n        this.state = {\n            angle: 0,\n            area: [],\n            position: { x: 0, y: 0 },\n            hardAngle: 0,\n            hardDrawingAngle: 0,\n        };\n\n        this.createdDensity = density;\n        this.nowDrawingDensity = this.createdDensity;\n\n        this.render = render;\n    }\n\n    /**\n     * Render static page\n     * \n     * @param {PageOrientation} orient - Static page orientation\n     */\n    public abstract simpleDraw(orient: PageOrientation): void;\n\n    /**\n     * Render dynamic page, using state\n     * \n     * @param {PageDensity} tempDensity - Density at the time of rendering \n     */\n    public abstract draw(tempDensity?: PageDensity): void;\n\n    /**\n     * Page loading\n     */\n    public abstract load(): void;\n\n    /**\n     * Set a constant page density\n     * \n     * @param {PageDensity} density \n     */\n    public setDensity(density: PageDensity): void {\n        this.createdDensity = density;\n        this.nowDrawingDensity = density;\n    }\n\n    /**\n     * Set temp page density to next render\n     * \n     * @param {PageDensity}  density \n     */\n    public setDrawingDensity(density: PageDensity): void {\n        this.nowDrawingDensity = density;\n    }\n\n    /**\n     * Set page position\n     * \n     * @param {Point} pagePos \n     */\n    public setPosition(pagePos: Point): void {\n        this.state.position = pagePos;\n    }\n\n    /**\n     * Set page angle\n     * \n     * @param {number} angle \n     */\n    public setAngle(angle: number): void {\n        this.state.angle = angle;\n    }\n\n    /**\n     * Set page crop area\n     * \n     * @param {Point[]} area \n     */\n    public setArea(area: Point[]): void {\n        this.state.area = area;\n    }\n\n    /**\n     * Rotate angle for hard pages to next render\n     * \n     * @param {number} angle \n     */\n    public setHardDrawingAngle(angle: number): void {\n        this.state.hardDrawingAngle = angle;\n    }\n\n    /**\n     * Rotate angle for hard pages\n     * \n     * @param {number} angle \n     */\n    public setHardAngle(angle: number): void {\n        this.state.hardAngle = angle;\n        this.state.hardDrawingAngle = angle;\n    }\n\n    /**\n     * Set page orientation\n     * \n     * @param {PageOrientation} orientation \n     */\n    public setOrientation(orientation: PageOrientation): void {\n        this.orientation = orientation;\n    }\n\n    /**\n     * Get temp page density\n     */\n    public getDrawingDensity(): PageDensity {\n        return this.nowDrawingDensity;\n    }\n\n    /**\n     * Get a constant page density\n     */\n    public getDensity(): PageDensity {\n        return this.createdDensity;\n    }\n    \n    /**\n     * Get rotate angle for hard pages\n     */\n    public getHardAngle(): number {\n        return this.state.hardAngle;\n    }\n\n    public abstract newTemporaryCopy(): Page;\n    public abstract getTemporaryCopy(): Page;\n    public abstract hideTemporaryCopy(): void;\n}\n","import { CanvasRender } from '../Render/CanvasRender';\nimport { Page, PageDensity, PageOrientation } from './Page';\nimport { Render } from '../Render/Render';\nimport { Point } from '../BasicTypes';\n\n/**\n * Class representing a book page as an image on Canvas\n */\nexport class ImagePage extends Page {\n    private readonly image: HTMLImageElement = null;\n    private isLoad = false;\n\n    private loadingAngle = 0;\n\n    constructor(render: Render, href: string, density: PageDensity) {\n        super(render, density);\n\n        this.image = new Image();\n        this.image.src = href;\n    }\n\n    public draw(tempDensity?: PageDensity): void {\n        const ctx = (this.render as CanvasRender).getContext();\n\n        const pagePos = this.render.convertToGlobal(this.state.position);\n        const pageWidth = this.render.getRect().pageWidth;\n        const pageHeight = this.render.getRect().height;\n\n        ctx.save();\n        ctx.translate(pagePos.x, pagePos.y);\n        ctx.beginPath();\n\n        for (let p of this.state.area) {\n            if (p !== null) {\n                p = this.render.convertToGlobal(p);\n                ctx.lineTo(p.x - pagePos.x, p.y - pagePos.y);\n            }\n        }\n\n        ctx.rotate(this.state.angle);\n\n        ctx.clip();\n\n        if (!this.isLoad) {\n            this.drawLoader(ctx, { x: 0, y: 0 }, pageWidth, pageHeight);\n        } else {\n            ctx.drawImage(this.image, 0, 0, pageWidth, pageHeight);\n        }\n\n        ctx.restore();\n    }\n\n    public simpleDraw(orient: PageOrientation): void {\n        const rect = this.render.getRect();\n        const ctx = (this.render as CanvasRender).getContext();\n\n        const pageWidth = rect.pageWidth;\n        const pageHeight = rect.height;\n\n        const x = orient === PageOrientation.RIGHT ? rect.left + rect.pageWidth : rect.left;\n\n        const y = rect.top;\n\n        if (!this.isLoad) {\n            this.drawLoader(ctx, { x, y }, pageWidth, pageHeight);\n        } else {\n            ctx.drawImage(this.image, x, y, pageWidth, pageHeight);\n        }\n    }\n\n    private drawLoader(\n        ctx: CanvasRenderingContext2D,\n        shiftPos: Point,\n        pageWidth: number,\n        pageHeight: number\n    ): void {\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgb(200, 200, 200)';\n        ctx.fillStyle = 'rgb(255, 255, 255)';\n        ctx.lineWidth = 1;\n        ctx.rect(shiftPos.x + 1, shiftPos.y + 1, pageWidth - 1, pageHeight - 1);\n        ctx.stroke();\n        ctx.fill();\n\n        const middlePoint: Point = {\n            x: shiftPos.x + pageWidth / 2,\n            y: shiftPos.y + pageHeight / 2,\n        };\n\n        ctx.beginPath();\n        ctx.lineWidth = 10;\n        ctx.arc(\n            middlePoint.x,\n            middlePoint.y,\n            20,\n            this.loadingAngle,\n            (3 * Math.PI) / 2 + this.loadingAngle\n        );\n        ctx.stroke();\n        ctx.closePath();\n\n        this.loadingAngle += 0.07;\n        if (this.loadingAngle >= 2 * Math.PI) {\n            this.loadingAngle = 0;\n        }\n    }\n\n    public load(): void {\n        if (!this.isLoad)\n            this.image.onload = (): void => {\n                this.isLoad = true;\n            };\n    }\n\n    public newTemporaryCopy(): Page {\n        return this;\n    }\n\n    public getTemporaryCopy(): Page {\n        return this;\n    }\n\n    public hideTemporaryCopy(): void {\n        return;\n    }\n}\n","import { Orientation, Render } from '../Render/Render';\nimport { Page, PageDensity } from '../Page/Page';\nimport { PageFlip } from '../PageFlip';\nimport { FlipDirection } from '../Flip/Flip';\n\ntype NumberArray = number[];\n\n/**\n * Ð¡lass representing a collection of pages\n */\nexport abstract class PageCollection {\n    protected readonly app: PageFlip;\n    protected readonly render: Render;\n    protected readonly isShowCover: boolean;\n\n    /** Pages List */\n    protected pages: Page[] = [];\n    /** Index of the current page in list */\n    protected currentPageIndex = 0;\n\n    /** Number of the current spread in book */\n    protected currentSpreadIndex = 0;\n    /**  Two-page spread in landscape mode */\n    protected landscapeSpread: NumberArray[] = [];\n    /**  One-page spread in portrait mode */\n    protected portraitSpread: NumberArray[] = [];\n\n    protected constructor(app: PageFlip, render: Render) {\n        this.render = render;\n        this.app = app;\n\n        this.currentPageIndex = 0;\n        this.isShowCover = this.app.getSettings().showCover;\n    }\n\n    /**\n     * Load pages\n     */\n    public abstract load(): void;\n\n    /**\n     * Clear pages list\n     */\n    public destroy(): void {\n        this.pages = [];\n    }\n\n    /**\n     * Split the book on the two-page spread in landscape mode and one-page spread in portrait mode\n     */\n    protected createSpread(): void {\n        this.landscapeSpread = [];\n        this.portraitSpread = [];\n\n        for (let i = 0; i < this.pages.length; i++) {\n            this.portraitSpread.push([i]); // In portrait mode - (one spread = one page)\n        }\n\n        let start = 0;\n        if (this.isShowCover) {\n            this.pages[0].setDensity(PageDensity.HARD);\n            this.landscapeSpread.push([start]);\n            start++;\n        }\n\n        for (let i = start; i < this.pages.length; i += 2) {\n            if (i < this.pages.length - 1) this.landscapeSpread.push([i, i + 1]);\n            else {\n                this.landscapeSpread.push([i]);\n                this.pages[i].setDensity(PageDensity.HARD);\n            }\n        }\n    }\n\n    /**\n     * Get spread by mode (portrait or landscape)\n     */\n    protected getSpread(): NumberArray[] {\n        return this.render.getOrientation() === Orientation.LANDSCAPE\n            ? this.landscapeSpread\n            : this.portraitSpread;\n    }\n\n    /**\n     * Get spread index by page number\n     * \n     * @param {number} pageNum - page index\n     */\n    public getSpreadIndexByPage(pageNum: number): number {\n        const spread = this.getSpread();\n\n        for (let i = 0; i < spread.length; i++)\n            if (pageNum === spread[i][0] || pageNum === spread[i][1]) return i;\n\n        return null;\n    }\n\n    /**\n     * Get the total number of pages\n     */\n    public getPageCount(): number {\n        return this.pages.length;\n    }\n\n    /**\n     * Get the pages list\n     */\n    public getPages(): Page[] {\n        return this.pages;\n    }\n\n    /**\n     * Get page by index\n     * \n     * @param {number} pageIndex\n     */\n    public getPage(pageIndex: number): Page {\n        if (pageIndex >= 0 && pageIndex < this.pages.length) {\n            return this.pages[pageIndex];\n        }\n\n        throw new Error('Invalid page number');\n    }\n\n    /**\n     * Get the next page from the specified\n     * \n     * @param {Page} current \n     */\n    public nextBy(current: Page): Page {\n        const idx = this.pages.indexOf(current);\n\n        if (idx < this.pages.length - 1) return this.pages[idx + 1];\n\n        return null;\n    }\n\n    /**\n     * Get previous page from specified\n     * \n     * @param {Page} current \n     */\n    public prevBy(current: Page): Page {\n        const idx = this.pages.indexOf(current);\n\n        if (idx > 0) return this.pages[idx - 1];\n\n        return null;\n    }\n\n    /**\n     * Get flipping page depending on the direction\n     * \n     * @param {FlipDirection} direction \n     */\n    public getFlippingPage(direction: FlipDirection): Page {\n        const current = this.currentSpreadIndex;\n\n        if (this.render.getOrientation() === Orientation.PORTRAIT) {\n            return direction === FlipDirection.FORWARD\n                ? this.pages[current].newTemporaryCopy()\n                : this.pages[current - 1];\n        } else {\n            const spread =\n                direction === FlipDirection.FORWARD\n                    ? this.getSpread()[current + 1]\n                    : this.getSpread()[current - 1];\n\n            if (spread.length === 1) return this.pages[spread[0]];\n\n            return direction === FlipDirection.FORWARD\n                ? this.pages[spread[0]]\n                : this.pages[spread[1]];\n        }\n    }\n\n    /**\n     * Get Next page at the time of flipping\n     * \n     * @param {FlipDirection}  direction \n     */\n    public getBottomPage(direction: FlipDirection): Page {\n        const current = this.currentSpreadIndex;\n\n        if (this.render.getOrientation() === Orientation.PORTRAIT) {\n            return direction === FlipDirection.FORWARD\n                ? this.pages[current + 1]\n                : this.pages[current - 1];\n        } else {\n            const spread =\n                direction === FlipDirection.FORWARD\n                    ? this.getSpread()[current + 1]\n                    : this.getSpread()[current - 1];\n\n            if (spread.length === 1) return this.pages[spread[0]];\n\n            return direction === FlipDirection.FORWARD\n                ? this.pages[spread[1]]\n                : this.pages[spread[0]];\n        }\n    }\n\n    /**\n     * Show next spread\n     */\n    public showNext(): void {\n        if (this.currentSpreadIndex < this.getSpread().length) {\n            this.currentSpreadIndex++;\n            this.showSpread();\n        }\n    }\n\n    /**\n     * Show prev spread\n     */\n    public showPrev(): void {\n        if (this.currentSpreadIndex > 0) {\n            this.currentSpreadIndex--;\n            this.showSpread();\n        }\n    }\n\n    /**\n     * Get the number of the current spread in book\n     */\n    public getCurrentPageIndex(): number {\n        return this.currentPageIndex;\n    }\n\n    /**\n     * Show specified page\n     * @param {number} pageNum - Page index (from 0s)\n     */\n    public show(pageNum: number = null): void {\n        if (pageNum === null) pageNum = this.currentPageIndex;\n\n        if (pageNum < 0 || pageNum >= this.pages.length) return;\n\n        const spreadIndex = this.getSpreadIndexByPage(pageNum);\n        if (spreadIndex !== null) {\n            this.currentSpreadIndex = spreadIndex;\n            this.showSpread();\n        }\n    }\n\n    /**\n     * Index of the current page in list\n     */\n    public getCurrentSpreadIndex(): number {\n        return this.currentSpreadIndex;\n    }\n\n    /**\n     * Set new spread index as current\n     * \n     * @param {number} newIndex - new spread index\n     */\n    public setCurrentSpreadIndex(newIndex: number): void {\n        if (newIndex >= 0 && newIndex < this.getSpread().length) {\n            this.currentSpreadIndex = newIndex;\n        } else {\n            throw new Error('Invalid page');\n        }\n    }\n\n    /**\n     * Show current spread\n     */\n    private showSpread(): void {\n        const spread = this.getSpread()[this.currentSpreadIndex];\n\n        if (spread.length === 2) {\n            this.render.setLeftPage(this.pages[spread[0]]);\n            this.render.setRightPage(this.pages[spread[1]]);\n        } else {\n            if (this.render.getOrientation() === Orientation.LANDSCAPE) {\n                if (spread[0] === this.pages.length - 1) {\n                    this.render.setLeftPage(this.pages[spread[0]]);\n                    this.render.setRightPage(null);\n                } else {\n                    this.render.setLeftPage(null);\n                    this.render.setRightPage(this.pages[spread[0]]);\n                }\n            } else {\n                this.render.setLeftPage(null);\n                this.render.setRightPage(this.pages[spread[0]]);\n            }\n        }\n\n        this.currentPageIndex = spread[0];\n        this.app.updatePageIndex(this.currentPageIndex);\n    }\n}\n","import { ImagePage } from '../Page/ImagePage';\nimport { Render } from '../Render/Render';\nimport { PageCollection } from './PageCollection';\nimport { PageFlip } from '../PageFlip';\nimport { PageDensity } from '../Page/Page';\n\n/**\n * Ð¡lass representing a collection of pages as images on the canvas\n */\nexport class ImagePageCollection extends PageCollection {\n    private readonly imagesHref: string[];\n\n    constructor(app: PageFlip, render: Render, imagesHref: string[]) {\n        super(app, render);\n\n        this.imagesHref = imagesHref;\n    }\n\n    public load(): void {\n        for (const href of this.imagesHref) {\n            const page = new ImagePage(this.render, href, PageDensity.SOFT);\n\n            page.load();\n            this.pages.push(page);\n        }\n\n        this.createSpread();\n    }\n}\n","import { Point, Rect, Segment } from './BasicTypes';\n\n/**\n * A class containing helping mathematical methods\n */\nexport class Helper {\n    /**\n     * Get the distance between two points\n     *\n     * @param {Point} point1\n     * @param {Point} point2\n     */\n    public static GetDistanceBetweenTwoPoint(point1: Point, point2: Point): number {\n        if (point1 === null || point2 === null) {\n            return Infinity;\n        }\n\n        return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n    }\n\n    /**\n     * Get the length of the line segment\n     *\n     * @param {Segment} segment\n     */\n    public static GetSegmentLength(segment: Segment): number {\n        return Helper.GetDistanceBetweenTwoPoint(segment[0], segment[1]);\n    }\n\n    /**\n     * Get the angle between two lines\n     *\n     * @param {Segment} line1\n     * @param {Segment} line2\n     */\n    public static GetAngleBetweenTwoLine(line1: Segment, line2: Segment): number {\n        const A1 = line1[0].y - line1[1].y;\n        const A2 = line2[0].y - line2[1].y;\n\n        const B1 = line1[1].x - line1[0].x;\n        const B2 = line2[1].x - line2[0].x;\n\n        return Math.acos((A1 * A2 + B1 * B2) / (Math.sqrt(A1 * A1 + B1 * B1) * Math.sqrt(A2 * A2 + B2 * B2)));\n    }\n\n    /**\n     * Check for a point in a rectangle\n     *\n     * @param {Rect} rect\n     * @param {Point} pos\n     *\n     * @returns {Point} If the point enters the rectangle its coordinates will be returned, otherwise - null\n     */\n    public static PointInRect(rect: Rect, pos: Point): Point {\n        if (pos === null) {\n            return null;\n        }\n\n        if (\n            pos.x >= rect.left &&\n            pos.x <= rect.width + rect.left &&\n            pos.y >= rect.top &&\n            pos.y <= rect.top + rect.height\n        ) {\n            return pos;\n        }\n        return null;\n    }\n\n    /**\n     * Transform point coordinates to a given angle\n     *\n     * @param {Point} transformedPoint - Point to rotate\n     * @param {Point} startPoint - Transformation reference point\n     * @param {number} angle - Rotation angle (in radians)\n     *\n     * @returns {Point} Point coordinates after rotation\n     */\n    public static GetRotatedPoint(transformedPoint: Point, startPoint: Point, angle: number): Point {\n        return {\n            x: transformedPoint.x * Math.cos(angle) + transformedPoint.y * Math.sin(angle) + startPoint.x,\n            y: transformedPoint.y * Math.cos(angle) - transformedPoint.x * Math.sin(angle) + startPoint.y,\n        };\n    }\n\n    /**\n     * Limit a point \"linePoint\" to a given circle centered at point \"startPoint\" and a given radius\n     *\n     * @param {Point} startPoint - Circle center\n     * @param {number} radius - Circle radius\n     * @param {Point} limitedPoint - Ð¡hecked point\n     *\n     * @returns {Point} If \"linePoint\" enters the circle, then its coordinates are returned.\n     * Else will be returned the intersection point between the line ([startPoint, linePoint]) and the circle\n     */\n    public static LimitPointToCircle(startPoint: Point, radius: number, limitedPoint: Point): Point {\n        // If \"linePoint\" enters the circle, do nothing\n        if (Helper.GetDistanceBetweenTwoPoint(startPoint, limitedPoint) <= radius) {\n            return limitedPoint;\n        }\n\n        const a = startPoint.x;\n        const b = startPoint.y;\n        const n = limitedPoint.x;\n        const m = limitedPoint.y;\n\n        // Find the intersection between the line at two points: (startPoint and limitedPoint) and the circle.\n        let x = Math.sqrt((Math.pow(radius, 2) * Math.pow(a - n, 2)) / (Math.pow(a - n, 2) + Math.pow(b - m, 2))) + a;\n        if (limitedPoint.x < 0) {\n            x *= -1;\n        }\n\n        let y = ((x - a) * (b - m)) / (a - n) + b;\n        if (a - n + b === 0) {\n            y = radius;\n        }\n\n        return { x, y };\n    }\n\n    /**\n     * Find the intersection of two lines bounded by a rectangle \"rectBorder\"\n     *\n     * @param {Rect} rectBorder\n     * @param {Segment} one\n     * @param {Segment} two\n     *\n     * @returns {Point} The intersection point, or \"null\" if it does not exist, or it lies outside the rectangle \"rectBorder\"\n     */\n    public static GetIntersectBetweenTwoSegment(rectBorder: Rect, one: Segment, two: Segment): Point {\n        return Helper.PointInRect(rectBorder, Helper.GetIntersectBeetwenTwoLine(one, two));\n    }\n\n    /**\n     * Find the intersection point of two lines\n     *\n     * @param one\n     * @param two\n     *\n     * @returns {Point} The intersection point, or \"null\" if it does not exist\n     * @throws Error if the segments are on the same line\n     */\n    public static GetIntersectBeetwenTwoLine(one: Segment, two: Segment): Point {\n        const A1 = one[0].y - one[1].y;\n        const A2 = two[0].y - two[1].y;\n\n        const B1 = one[1].x - one[0].x;\n        const B2 = two[1].x - two[0].x;\n\n        const C1 = one[0].x * one[1].y - one[1].x * one[0].y;\n        const C2 = two[0].x * two[1].y - two[1].x * two[0].y;\n\n        const det1 = A1 * C2 - A2 * C1;\n        const det2 = B1 * C2 - B2 * C1;\n\n        const x = -((C1 * B2 - C2 * B1) / (A1 * B2 - A2 * B1));\n        const y = -((A1 * C2 - A2 * C1) / (A1 * B2 - A2 * B1));\n\n        if (isFinite(x) && isFinite(y)) {\n            return { x, y };\n        } else {\n            if (Math.abs(det1 - det2) < 0.1) throw new Error('Segment included');\n        }\n\n        return null;\n    }\n\n    /**\n     * Get a list of coordinates (step: 1px) between two points\n     *\n     * @param pointOne\n     * @param pointTwo\n     *\n     * @returns {Point[]}\n     */\n    public static GetCordsFromTwoPoint(pointOne: Point, pointTwo: Point): Point[] {\n        const sizeX = Math.abs(pointOne.x - pointTwo.x);\n        const sizeY = Math.abs(pointOne.y - pointTwo.y);\n\n        const lengthLine = Math.max(sizeX, sizeY);\n\n        const result: Point[] = [pointOne];\n\n        function getCord(c1: number, c2: number, size: number, length: number, index: number): number {\n            if (c2 > c1) {\n                return c1 + index * (size / length);\n            } else if (c2 < c1) {\n                return c1 - index * (size / length);\n            }\n\n            return c1;\n        }\n\n        for (let i = 1; i <= lengthLine; i += 1) {\n            result.push({\n                x: getCord(pointOne.x, pointTwo.x, sizeX, lengthLine, i),\n                y: getCord(pointOne.y, pointTwo.y, sizeY, lengthLine, i),\n            });\n        }\n\n        return result;\n    }\n}\n","import { Page, PageDensity, PageOrientation } from './Page';\nimport { Render } from '../Render/Render';\nimport { Helper } from '../Helper';\nimport { FlipDirection } from '../Flip/Flip';\nimport { Point } from '../BasicTypes';\n\n/**\n * Class representing a book page as a HTML Element\n */\nexport class HTMLPage extends Page {\n    private readonly element: HTMLElement;\n    private copiedElement: HTMLElement = null;\n\n    private temporaryCopy: Page = null;\n\n    private isLoad = false;\n\n    constructor(render: Render, element: HTMLElement, density: PageDensity) {\n        super(render, density);\n\n        this.element = element;\n        this.element.classList.add('stf__item');\n        this.element.classList.add('--' + density);\n    }\n\n    public newTemporaryCopy(): Page {\n        if (this.nowDrawingDensity === PageDensity.HARD) {\n            return this;\n        }\n\n        if (this.temporaryCopy === null) {\n            this.copiedElement = this.element.cloneNode(true) as HTMLElement;\n            this.element.parentElement.appendChild(this.copiedElement);\n\n            this.temporaryCopy = new HTMLPage(\n                this.render,\n                this.copiedElement,\n                this.nowDrawingDensity\n            );\n        }\n\n        return this.getTemporaryCopy();\n    }\n\n    public getTemporaryCopy(): Page {\n        return this.temporaryCopy;\n    }\n\n    public hideTemporaryCopy(): void {\n        if (this.temporaryCopy !== null) {\n            this.copiedElement.remove();\n            this.copiedElement = null;\n            this.temporaryCopy = null;\n        }\n    }\n\n    public draw(tempDensity?: PageDensity): void {\n        const density = tempDensity ? tempDensity : this.nowDrawingDensity;\n\n        const pagePos = this.render.convertToGlobal(this.state.position);\n        const pageWidth = this.render.getRect().pageWidth;\n        const pageHeight = this.render.getRect().height;\n\n        this.element.classList.remove('--simple');\n\n        const commonStyle = `\n            display: block;\n            z-index: ${this.element.style.zIndex};\n            left: 0;\n            top: 0;\n            width: ${pageWidth}px;\n            height: ${pageHeight}px;\n        `;\n\n        density === PageDensity.HARD\n            ? this.drawHard(commonStyle)\n            : this.drawSoft(pagePos, commonStyle);\n    }\n\n    private drawHard(commonStyle = ''): void {\n        const pos = this.render.getRect().left + this.render.getRect().width / 2;\n\n        const angle = this.state.hardDrawingAngle;\n\n        const newStyle =\n            commonStyle +\n            `\n                backface-visibility: hidden;\n                -webkit-backface-visibility: hidden;\n                clip-path: none;\n                -webkit-clip-path: none;\n            ` +\n            (this.orientation === PageOrientation.LEFT\n                ? `transform-origin: ${this.render.getRect().pageWidth}px 0; \n                   transform: translate3d(0, 0, 0) rotateY(${angle}deg);`\n                : `transform-origin: 0 0; \n                   transform: translate3d(${pos}px, 0, 0) rotateY(${angle}deg);`);\n\n        this.element.style.cssText = newStyle;\n    }\n\n    private drawSoft(position: Point, commonStyle = ''): void {\n        let polygon = 'polygon( ';\n        for (const p of this.state.area) {\n            if (p !== null) {\n                let g =\n                    this.render.getDirection() === FlipDirection.BACK\n                        ? {\n                              x: -p.x + this.state.position.x,\n                              y: p.y - this.state.position.y,\n                          }\n                        : {\n                              x: p.x - this.state.position.x,\n                              y: p.y - this.state.position.y,\n                          };\n\n                g = Helper.GetRotatedPoint(g, { x: 0, y: 0 }, this.state.angle);\n                polygon += g.x + 'px ' + g.y + 'px, ';\n            }\n        }\n        polygon = polygon.slice(0, -2);\n        polygon += ')';\n\n        const newStyle =\n            commonStyle +\n            `transform-origin: 0 0; clip-path: ${polygon}; -webkit-clip-path: ${polygon};` +\n            (this.render.isSafari() && this.state.angle === 0\n                ? `transform: translate(${position.x}px, ${position.y}px);`\n                : `transform: translate3d(${position.x}px, ${position.y}px, 0) rotate(${this.state.angle}rad);`);\n\n        this.element.style.cssText = newStyle;\n    }\n\n    public simpleDraw(orient: PageOrientation): void {\n        const rect = this.render.getRect();\n\n        const pageWidth = rect.pageWidth;\n        const pageHeight = rect.height;\n\n        const x = orient === PageOrientation.RIGHT ? rect.left + rect.pageWidth : rect.left;\n\n        const y = rect.top;\n\n        this.element.classList.add('--simple');\n        this.element.style.cssText = `\n            position: absolute; \n            display: block; \n            height: ${pageHeight}px; \n            left: ${x}px; \n            top: ${y}px; \n            width: ${pageWidth}px; \n            z-index: ${this.render.getSettings().startZIndex + 1};`;\n    }\n\n    public getElement(): HTMLElement {\n        return this.element;\n    }\n\n    public load(): void {\n        this.isLoad = true;\n    }\n\n    public setOrientation(orientation: PageOrientation): void {\n        super.setOrientation(orientation);\n        this.element.classList.remove('--left', '--right');\n\n        this.element.classList.add(orientation === PageOrientation.RIGHT ? '--right' : '--left');\n    }\n\n    public setDrawingDensity(density: PageDensity): void {\n        this.element.classList.remove('--soft', '--hard');\n        this.element.classList.add('--' + density);\n\n        super.setDrawingDensity(density);\n    }\n}\n","import { HTMLPage } from '../Page/HTMLPage';\nimport { Render } from '../Render/Render';\nimport { PageCollection } from './PageCollection';\nimport { PageFlip } from '../PageFlip';\nimport { PageDensity } from '../Page/Page';\n\n/**\n * Ð¡lass representing a collection of pages as HTML Element\n */\nexport class HTMLPageCollection extends PageCollection {\n    private readonly element: HTMLElement;\n    private readonly pagesElement: NodeListOf<HTMLElement> | HTMLElement[];\n\n    constructor(\n        app: PageFlip,\n        render: Render,\n        element: HTMLElement,\n        items: NodeListOf<HTMLElement> | HTMLElement[]\n    ) {\n        super(app, render);\n\n        this.element = element;\n        this.pagesElement = items;\n    }\n\n    public load(): void {\n        // @ts-ignore\n        for (const pageElement of this.pagesElement) {\n            const page = new HTMLPage(\n                this.render,\n                pageElement,\n                pageElement.dataset['density'] === 'hard' ? PageDensity.HARD : PageDensity.SOFT\n            );\n\n            page.load();\n            this.pages.push(page);\n        }\n\n        this.createSpread();\n    }\n}\n","import { Helper } from '../Helper';\nimport { Point, Rect, RectPoints, Segment } from '../BasicTypes';\nimport { FlipCorner, FlipDirection } from './Flip';\n\n/**\n * Class representing mathematical methods for calculating page position (rotation angle, clip area ...)\n */\nexport class FlipCalculation {\n    /** Calculated rotation angle to flipping page */\n    private angle: number;\n    /** Calculated position to flipping page */\n    private position: Point;\n\n    private rect: RectPoints;\n\n    /** The point of intersection of the page with the borders of the book */\n    private topIntersectPoint: Point = null; // With top border\n    private sideIntersectPoint: Point = null; // With side border\n    private bottomIntersectPoint: Point = null; // With bottom border\n\n    private readonly pageWidth: number;\n    private readonly pageHeight: number;\n\n    /**\n     * @constructor\n     *\n     * @param {FlipDirection} direction - Flipping direction\n     * @param {FlipCorner} corner - Flipping corner\n     * @param pageWidth - Current page width\n     * @param pageHeight - Current page height\n     */\n    constructor(\n        private direction: FlipDirection,\n        private corner: FlipCorner,\n\n        pageWidth: string,\n        pageHeight: string\n    ) {\n        this.pageWidth = parseInt(pageWidth, 10);\n        this.pageHeight = parseInt(pageHeight, 10);\n    }\n\n    /**\n     * The main calculation method\n     * \n     * @param {Point} localPos - Touch Point Coordinates (relative active page!)\n     * \n     * @returns {boolean} True - if the calculations were successful, false if errors occurred\n     */\n    public calc(localPos: Point): boolean {\n        try {\n            // Find: page rotation angle and active corner position\n            this.position = this.calcAngleAndPosition(localPos);\n            // Find the intersection points of the scrolling page and the book\n            this.calculateIntersectPoint(this.position);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the crop area for the flipping page\n     * \n     * @returns {Point[]} Polygon page\n     */\n    public getFlippingClipArea(): Point[] {\n        const result = [];\n        let clipBottom = false;\n\n        result.push(this.rect.topLeft);\n        result.push(this.topIntersectPoint);\n\n        if (this.sideIntersectPoint === null) {\n            clipBottom = true;\n        } else {\n            result.push(this.sideIntersectPoint);\n\n            if (this.bottomIntersectPoint === null) clipBottom = false;\n        }\n\n        result.push(this.bottomIntersectPoint);\n\n        if (clipBottom || this.corner === FlipCorner.BOTTOM) {\n            result.push(this.rect.bottomLeft);\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the crop area for the page that is below the page to be flipped\n     * \n     * @returns {Point[]} Polygon page\n     */\n    public getBottomClipArea(): Point[] {\n        const result = [];\n\n        result.push(this.topIntersectPoint);\n\n        if (this.corner === FlipCorner.TOP) {\n            result.push({ x: this.pageWidth, y: 0 });\n        } else {\n            if (this.topIntersectPoint !== null) {\n                result.push({ x: this.pageWidth, y: 0 });\n            }\n            result.push({ x: this.pageWidth, y: this.pageHeight });\n        }\n\n        if (this.sideIntersectPoint !== null) {\n            if (\n                Helper.GetDistanceBetweenTwoPoint(\n                    this.sideIntersectPoint,\n                    this.topIntersectPoint\n                ) >= 10\n            )\n                result.push(this.sideIntersectPoint);\n        } else {\n            if (this.corner === FlipCorner.TOP) {\n                result.push({ x: this.pageWidth, y: this.pageHeight });\n            }\n        }\n\n        result.push(this.bottomIntersectPoint);\n        result.push(this.topIntersectPoint);\n\n        return result;\n    }\n\n    /**\n     * Get page rotation angle\n     */\n    public getAngle(): number {\n        if (this.direction === FlipDirection.FORWARD) {\n            return -this.angle;\n        }\n\n        return this.angle;\n    }\n\n    /**\n     * Get page area while flipping\n     */\n    public getRect(): RectPoints {\n        return this.rect;\n    }\n\n    /**\n     * Get the position of the active angle when turning\n     */\n    public getPosition(): Point {\n        return this.position;\n    }\n\n    /**\n     * Get the active corner of the page (which pull)\n     */\n    public getActiveCorner(): Point {\n        if (this.direction === FlipDirection.FORWARD) {\n            return this.rect.topLeft;\n        }\n\n        return this.rect.topRight;\n    }\n\n    /**\n     * Get flipping direction\n     */\n    public getDirection(): FlipDirection {\n        return this.direction;\n    }\n\n    /**\n     * Get flipping progress (0-100)\n     */\n    public getFlippingProgress(): number {\n        return Math.abs(((this.position.x - this.pageWidth) / (2 * this.pageWidth)) * 100);\n    }\n    \n    /**\n     * Get flipping corner position (top, bottom)\n     */\n    public getCorner(): FlipCorner {\n        return this.corner;\n    }\n\n    /**\n     * Get start position for the page that is below the page to be flipped\n     */\n    public getBottomPagePosition(): Point {\n        if (this.direction === FlipDirection.BACK) {\n            return { x: this.pageWidth, y: 0 };\n        }\n\n        return { x: 0, y: 0 };\n    }\n\n    /**\n     * Get the starting position of the shadow\n     */\n    public getShadowStartPoint(): Point {\n        if (this.corner === FlipCorner.TOP) {\n            return this.topIntersectPoint;\n        } else {\n            if (this.sideIntersectPoint !== null) return this.sideIntersectPoint;\n\n            return this.topIntersectPoint;\n        }\n    }\n\n    /**\n     * Get the rotate angle of the shadow\n     */\n    public getShadowAngle(): number {\n        const angle = Helper.GetAngleBetweenTwoLine(this.getSegmentToShadowLine(), [\n            { x: 0, y: 0 },\n            { x: this.pageWidth, y: 0 },\n        ]);\n\n        if (this.direction === FlipDirection.FORWARD) {\n            return angle;\n        }\n\n        return Math.PI - angle;\n    }\n\n    private calcAngleAndPosition(pos: Point): Point {\n        let result = pos;\n\n        this.updateAngleAndGeometry(result);\n\n        if (this.corner === FlipCorner.TOP) {\n            result = this.checkPositionAtCenterLine(\n                result,\n                { x: 0, y: 0 },\n                { x: 0, y: this.pageHeight }\n            );\n        } else {\n            result = this.checkPositionAtCenterLine(\n                result,\n                { x: 0, y: this.pageHeight },\n                { x: 0, y: 0 }\n            );\n        }\n\n        if (Math.abs(result.x - this.pageWidth) < 1 && Math.abs(result.y) < 1) {\n            throw new Error('Point is too small');\n        }\n\n        return result;\n    }\n\n    private updateAngleAndGeometry(pos: Point): void {\n        this.angle = this.calculateAngle(pos);\n        this.rect = this.getPageRect(pos);\n    }\n\n    private calculateAngle(pos: Point): number {\n        const left = this.pageWidth - pos.x + 1;\n        const top = this.corner === FlipCorner.BOTTOM ? this.pageHeight - pos.y : pos.y;\n\n        let angle = 2 * Math.acos(left / Math.sqrt(top * top + left * left));\n\n        if (top < 0) angle = -angle;\n\n        const da = Math.PI - angle;\n        if (!isFinite(angle) || (da >= 0 && da < 0.003))\n            throw new Error('The G point is too small');\n\n        if (this.corner === FlipCorner.BOTTOM) angle = -angle;\n\n        return angle;\n    }\n\n\n    private getPageRect(localPos: Point): RectPoints {\n        if (this.corner === FlipCorner.TOP) {\n            return this.getRectFromBasePoint(\n                [\n                    { x: 0, y: 0 },\n                    { x: this.pageWidth, y: 0 },\n                    { x: 0, y: this.pageHeight },\n                    { x: this.pageWidth, y: this.pageHeight },\n                ],\n                localPos\n            );\n        }\n\n        return this.getRectFromBasePoint(\n            [\n                { x: 0, y: -this.pageHeight },\n                { x: this.pageWidth, y: -this.pageHeight },\n                { x: 0, y: 0 },\n                { x: this.pageWidth, y: 0 },\n            ],\n            localPos\n        );\n    }\n\n    private getRectFromBasePoint(points: Point[], localPos: Point): RectPoints {\n        return {\n            topLeft: this.getRotatedPoint(points[0], localPos),\n            topRight: this.getRotatedPoint(points[1], localPos),\n            bottomLeft: this.getRotatedPoint(points[2], localPos),\n            bottomRight: this.getRotatedPoint(points[3], localPos),\n        };\n    }\n\n    private getRotatedPoint(transformedPoint: Point, startPoint: Point): Point {\n        return {\n            x:\n                transformedPoint.x * Math.cos(this.angle) +\n                transformedPoint.y * Math.sin(this.angle) +\n                startPoint.x,\n            y:\n                transformedPoint.y * Math.cos(this.angle) -\n                transformedPoint.x * Math.sin(this.angle) +\n                startPoint.y,\n        };\n    }\n\n    private calculateIntersectPoint(pos: Point): void {\n        const boundRect: Rect = {\n            left: -1,\n            top: -1,\n            width: this.pageWidth + 2,\n            height: this.pageHeight + 2,\n        };\n\n        if (this.corner === FlipCorner.TOP) {\n            this.topIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\n                boundRect,\n                [pos, this.rect.topRight],\n                [\n                    { x: 0, y: 0 },\n                    { x: this.pageWidth, y: 0 },\n                ]\n            );\n\n            this.sideIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\n                boundRect,\n                [pos, this.rect.bottomLeft],\n                [\n                    { x: this.pageWidth, y: 0 },\n                    { x: this.pageWidth, y: this.pageHeight },\n                ]\n            );\n\n            this.bottomIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\n                boundRect,\n                [this.rect.bottomLeft, this.rect.bottomRight],\n                [\n                    { x: 0, y: this.pageHeight },\n                    { x: this.pageWidth, y: this.pageHeight },\n                ]\n            );\n        } else {\n            this.topIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\n                boundRect,\n                [this.rect.topLeft, this.rect.topRight],\n                [\n                    { x: 0, y: 0 },\n                    { x: this.pageWidth, y: 0 },\n                ]\n            );\n\n            this.sideIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\n                boundRect,\n                [pos, this.rect.topLeft],\n                [\n                    { x: this.pageWidth, y: 0 },\n                    { x: this.pageWidth, y: this.pageHeight },\n                ]\n            );\n\n            this.bottomIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\n                boundRect,\n                [this.rect.bottomLeft, this.rect.bottomRight],\n                [\n                    { x: 0, y: this.pageHeight },\n                    { x: this.pageWidth, y: this.pageHeight },\n                ]\n            );\n        }\n    }\n\n    private checkPositionAtCenterLine(\n        checkedPos: Point,\n        centerOne: Point,\n        centerTwo: Point\n    ): Point {\n        let result = checkedPos;\n\n        const tmp = Helper.LimitPointToCircle(centerOne, this.pageWidth, result);\n        if (result !== tmp) {\n            result = tmp;\n            this.updateAngleAndGeometry(result);\n        }\n\n        const rad = Math.sqrt(Math.pow(this.pageWidth, 2) + Math.pow(this.pageHeight, 2));\n\n        let checkPointOne = this.rect.bottomRight;\n        let checkPointTwo = this.rect.topLeft;\n\n        if (this.corner === FlipCorner.BOTTOM) {\n            checkPointOne = this.rect.topRight;\n            checkPointTwo = this.rect.bottomLeft;\n        }\n\n        if (checkPointOne.x <= 0) {\n            const bottomPoint = Helper.LimitPointToCircle(centerTwo, rad, checkPointTwo);\n\n            if (bottomPoint !== result) {\n                result = bottomPoint;\n                this.updateAngleAndGeometry(result);\n            }\n        }\n\n        return result;\n    }\n\n    private getSegmentToShadowLine(): Segment {\n        const first = this.getShadowStartPoint();\n\n        const second =\n            first !== this.sideIntersectPoint && this.sideIntersectPoint !== null\n                ? this.sideIntersectPoint\n                : this.bottomIntersectPoint;\n\n        return [first, second];\n    }\n}\n","import { Orientation, Render } from '../Render/Render';\nimport { PageFlip } from '../PageFlip';\nimport { Helper } from '../Helper';\nimport { PageRect, Point } from '../BasicTypes';\nimport { FlipCalculation } from './FlipCalculation';\nimport { Page, PageDensity } from '../Page/Page';\n\n/**\n * Flipping direction\n */\nexport const enum FlipDirection {\n    FORWARD,\n    BACK,\n}\n\n/**\n * Active corner when flipping\n */\nexport const enum FlipCorner {\n    TOP = 'top',\n    BOTTOM = 'bottom',\n}\n\n/**\n * State of the book\n */\nexport const enum FlippingState {\n    /** The user folding the page */\n    USER_FOLD = 'user_fold',\n\n    /** Mouse over active corners */\n    FOLD_CORNER = 'fold_corner',\n\n    /** During flipping animation */\n    FLIPPING = 'flipping',\n\n    /** Base state */\n    READ = 'read',\n}\n\n/**\n * Class representing the flipping process\n */\nexport class Flip {\n    private readonly render: Render;\n    private readonly app: PageFlip;\n\n    private flippingPage: Page = null;\n    private bottomPage: Page = null;\n\n    private calc: FlipCalculation = null;\n\n    private state: FlippingState = FlippingState.READ;\n\n    constructor(render: Render, app: PageFlip) {\n        this.render = render;\n        this.app = app;\n    }\n\n    /**\n     * Called when the page folding (User drags page corner)\n     * \n     * @param globalPos - Touch Point Coordinates (relative window)\n     */\n    public fold(globalPos: Point): void {\n        this.setState(FlippingState.USER_FOLD);\n\n        // If the process has not started yet\n        if (this.calc === null) this.start(globalPos);\n\n        this.do(this.render.convertToPage(globalPos));\n    }\n\n    /**\n     * Page turning with animation\n     * \n     * @param globalPos - Touch Point Coordinates (relative window)\n     */\n    public flip(globalPos: Point): void {\n        // the flipiing process is already running\n        if (this.calc !== null) this.render.finishAnimation();\n\n        if (!this.start(globalPos)) return;\n\n        const rect = this.getBoundsRect();\n\n        this.setState(FlippingState.FLIPPING);\n\n        // Margin from top to start flipping\n        const topMargins = rect.height / 10;\n\n        // Defining animation start points\n        const yStart =\n            this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height - topMargins : topMargins;\n\n        const yDest = this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height : 0;\n\n        // Ð¡alculations for these points\n        this.calc.calc({ x: rect.pageWidth - topMargins, y: yStart });\n\n        // Run flipping animation\n        this.animateFlippingTo(\n            { x: rect.pageWidth - topMargins, y: yStart },\n            { x: -rect.pageWidth, y: yDest },\n            true\n        );\n    }\n\n    /**\n     * Start the flipping process. Find direction and corner of flipping. Creating an object for calculation.\n     * \n     * @param {Point} globalPos - Touch Point Coordinates (relative window)\n     * \n     * @returns {boolean} True if flipping is possible, false otherwise\n     */\n    public start(globalPos: Point): boolean {\n        this.reset();\n\n        const bookPos = this.render.convertToBook(globalPos);\n        const rect = this.getBoundsRect();\n        \n        // Find the direction of flipping\n        const direction = this.getDirectionByPoint(bookPos);\n\n        // Find the active corner\n        const flipCorner = bookPos.y >= rect.height / 2 ? FlipCorner.BOTTOM : FlipCorner.TOP;\n\n        if (!this.checkDirection(direction)) return false;\n\n        try {\n            this.flippingPage = this.app.getPageCollection().getFlippingPage(direction);\n            this.bottomPage = this.app.getPageCollection().getBottomPage(direction);\n\n            // In landscape mode, needed to set the density  of the next page to the same as that of the flipped\n            if (this.render.getOrientation() === Orientation.LANDSCAPE) {\n                if (direction === FlipDirection.BACK) {\n                    const nextPage = this.app.getPageCollection().nextBy(this.flippingPage);\n\n                    if (nextPage !== null) {\n                        if (this.flippingPage.getDensity() !== nextPage.getDensity()) {\n                            this.flippingPage.setDrawingDensity(PageDensity.HARD);\n                            nextPage.setDrawingDensity(PageDensity.HARD);\n                        }\n                    }\n                } else {\n                    const prevPage = this.app.getPageCollection().prevBy(this.flippingPage);\n\n                    if (prevPage !== null) {\n                        if (this.flippingPage.getDensity() !== prevPage.getDensity()) {\n                            this.flippingPage.setDrawingDensity(PageDensity.HARD);\n                            prevPage.setDrawingDensity(PageDensity.HARD);\n                        }\n                    }\n                }\n            }\n\n            this.render.setDirection(direction);\n            this.calc = new FlipCalculation(\n                direction,\n                flipCorner,\n                rect.pageWidth.toString(10), // fix bug with type casting\n                rect.height.toString(10) // fix bug with type casting\n            );\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Perform calculations for the current page position. Pass data to render object\n     * \n     * @param {Point} pagePos - Touch Point Coordinates (relative active page)\n     */\n    private do(pagePos: Point): void {\n        if (this.calc === null) return; // Flipping process not started\n\n        if (this.calc.calc(pagePos)) { // Perform calculations for a specific position\n            const progress = this.calc.getFlippingProgress();\n\n            this.bottomPage.setArea(this.calc.getBottomClipArea());\n            this.bottomPage.setPosition(this.calc.getBottomPagePosition());\n            this.bottomPage.setAngle(0);\n            this.bottomPage.setHardAngle(0);\n\n            this.flippingPage.setArea(this.calc.getFlippingClipArea());\n            this.flippingPage.setPosition(this.calc.getActiveCorner());\n            this.flippingPage.setAngle(this.calc.getAngle());\n\n            if (this.calc.getDirection() === FlipDirection.FORWARD) {\n                this.flippingPage.setHardAngle((90 * (200 - progress * 2)) / 100);\n            } else {\n                this.flippingPage.setHardAngle((-90 * (200 - progress * 2)) / 100);\n            }\n\n            this.render.setPageRect(this.calc.getRect());\n\n            this.render.setBottomPage(this.bottomPage);\n            this.render.setFlippingPage(this.flippingPage);\n\n            this.render.setShadowData(\n                this.calc.getShadowStartPoint(),\n                this.calc.getShadowAngle(),\n                progress,\n                this.calc.getDirection()\n            );\n        }\n    }\n\n    /**\n     * Turn to the specified page number (with animation)\n     *\n     * @param {number} page - New page number\n     * @param {FlipCorner} corner - Active page corner when turning\n     */\n    public flipToPage(page: number, corner: FlipCorner): void {\n        const current = this.app.getPageCollection().getCurrentSpreadIndex();\n        const next = this.app.getPageCollection().getSpreadIndexByPage(page);\n\n        try {\n            if (next > current) {\n                this.app.getPageCollection().setCurrentSpreadIndex(next - 1);\n                this.flipNext(corner);\n            }\n            if (next < current) {\n                this.app.getPageCollection().setCurrentSpreadIndex(next + 1);\n                this.flipPrev(corner);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    /**\n     * Turn to the next page (with animation)\n     *\n     * @param {FlipCorner} corner - Active page corner when turning\n     */\n    public flipNext(corner: FlipCorner): void {\n        this.flip({\n            x: this.render.getRect().left + this.render.getRect().pageWidth * 2,\n            y: corner === FlipCorner.TOP ? 1 : this.render.getRect().height - 2,\n        });\n    }\n\n    /**\n     * Turn to the prev page (with animation)\n     *\n     * @param {FlipCorner} corner - Active page corner when turning\n     */\n    public flipPrev(corner: FlipCorner): void {\n        this.flip({\n            x: 10,\n            y: corner === FlipCorner.TOP ? 1 : this.render.getRect().height - 2,\n        });\n    }\n\n    /**\n     * Called when the user has stopped flipping\n     */\n    public stopMove(): void {\n        if (this.calc === null) return;\n\n        const pos = this.calc.getPosition();\n        const rect = this.getBoundsRect();\n\n        const y = this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height : 0;\n\n        if (pos.x <= 0) this.animateFlippingTo(pos, { x: -rect.pageWidth, y }, true);\n        else this.animateFlippingTo(pos, { x: rect.pageWidth, y }, false);\n    }\n\n    /**\n     * Fold the corners of the book when the mouse pointer is over them.\n     * Called when the mouse pointer is over the book without clicking\n     * \n     * @param globalPos \n     */\n    public showCorner(globalPos: Point): void {\n        if (!this.checkState(FlippingState.READ, FlippingState.FOLD_CORNER)) return;\n\n        const rect = this.getBoundsRect();\n        const pageWidth = rect.pageWidth;\n\n        // folding angle length\n        const operatingDistance = Math.sqrt(Math.pow(pageWidth, 2) + Math.pow(rect.height, 2)) / 5;\n\n        const bookPos = this.render.convertToBook(globalPos);\n\n        if (\n            bookPos.x > 0 &&\n            bookPos.y > 0 &&\n            bookPos.x < rect.width &&\n            bookPos.y < rect.height &&\n            (bookPos.x < operatingDistance || bookPos.x > rect.width - operatingDistance) &&\n            (bookPos.y < operatingDistance || bookPos.y > rect.height - operatingDistance)\n        ) {\n            if (this.calc === null) {\n                if (!this.start(globalPos)) return;\n\n                this.setState(FlippingState.FOLD_CORNER);\n\n                this.calc.calc({ x: pageWidth - 1, y: 1 });\n\n                const fixedCornerSize = 50;\n                const yStart = this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height - 1 : 1;\n\n                const yDest =\n                    this.calc.getCorner() === FlipCorner.BOTTOM\n                        ? rect.height - fixedCornerSize\n                        : fixedCornerSize;\n\n                this.animateFlippingTo(\n                    { x: pageWidth - 1, y: yStart },\n                    { x: pageWidth - fixedCornerSize, y: yDest },\n                    false,\n                    false\n                );\n            } else {\n                this.do(this.render.convertToPage(globalPos));\n            }\n        } else {\n            this.setState(FlippingState.READ);\n            this.render.finishAnimation();\n\n            this.stopMove();\n        }\n    }\n\n    /**\n     * Starting the flipping animation process\n     * \n     * @param {Point} start - animation start point\n     * @param {Point} dest - animation end point\n     * @param {boolean} isTurned - will the page turn over, or just bring it back\n     * @param {boolean} needReset - reset the flipping process at the end of the animation\n     */\n    private animateFlippingTo(\n        start: Point,\n        dest: Point,\n        isTurned: boolean,\n        needReset = true\n    ): void {\n        const points = Helper.GetCordsFromTwoPoint(start, dest);\n\n        // Create frames\n        const frames = [];\n        for (const p of points) frames.push(() => this.do(p));\n\n        const duration = this.getAnimationDuration(points.length);\n\n        this.render.startAnimation(frames, duration, () => {\n            // callback function\n            if (!this.calc) return;\n\n            if (isTurned) {\n                if (this.calc.getDirection() === FlipDirection.BACK) this.app.turnToPrevPage();\n                else this.app.turnToNextPage();\n            }\n\n            if (needReset) {\n                this.render.setBottomPage(null);\n                this.render.setFlippingPage(null);\n                this.render.clearShadow();\n\n                this.setState(FlippingState.READ);\n                this.reset();\n            }\n        });\n    }\n\n    /**\n     * Get the current calculations object\n     */\n    public getCalculation(): FlipCalculation {\n        return this.calc;\n    }\n\n    /**\n     * Get current flipping state\n     */\n    public getState(): FlippingState {\n        return this.state;\n    }\n\n    private setState(newState: FlippingState): void {\n        if (this.state !== newState) {\n            this.app.updateState(newState);\n            this.state = newState;\n        }\n    }\n\n    private getDirectionByPoint(touchPos: Point): FlipDirection {\n        const rect = this.getBoundsRect();\n        \n        if (this.render.getOrientation() === Orientation.PORTRAIT) {\n            if (touchPos.x - rect.pageWidth <= rect.width / 5) {\n                return FlipDirection.BACK;\n            }\n        } else if (touchPos.x < rect.width / 2) {\n            return FlipDirection.BACK;\n        }\n\n        return FlipDirection.FORWARD;\n    }\n\n    private getAnimationDuration(size: number): number {\n        const defaultTime = this.app.getSettings().flippingTime;\n\n        if (size >= 1000) return defaultTime;\n\n        return (size / 1000) * defaultTime;\n    }\n\n    private checkDirection(direction: FlipDirection): boolean {\n        if (direction === FlipDirection.FORWARD)\n            return this.app.getCurrentPageIndex() < this.app.getPageCount() - 1;\n\n        return this.app.getCurrentPageIndex() >= 1;\n    }\n\n    private reset(): void {\n        this.calc = null;\n        this.flippingPage = null;\n        this.bottomPage = null;\n    }\n\n    private getBoundsRect(): PageRect {\n        return this.render.getRect();\n    }\n\n    private checkState(...states: FlippingState[]): boolean {\n        for (const state of states) {\n            if (this.state === state) return true;\n        }\n\n        return false;\n    }\n}\n","import { PageFlip } from '../PageFlip';\nimport { Point, PageRect, RectPoints } from '../BasicTypes';\nimport { FlipDirection } from '../Flip/Flip';\nimport { Page, PageOrientation } from '../Page/Page';\nimport { FlipSetting, SizeType } from '../Settings';\n\ntype FrameAction = () => void;\ntype AnimationSuccessAction = () => void;\n\n/**\n * Type describing calculated values for drop shadows\n */\ntype Shadow = {\n    /** Shadow Position Start Point */\n    pos: Point;\n    /** The angle of the shadows relative to the book */\n    angle: number;\n    /** Base width shadow */\n    width: number;\n    /** Base shadow opacity */\n    opacity: number;\n    /** Flipping Direction, the direction of the shadow gradients */\n    direction: FlipDirection;\n    /** Flipping progress in percent (0 - 100) */\n    progress: number;\n};\n\n/**\n * Type describing the animation process\n * Only one animation process can be started at a same time\n */\ntype AnimationProcess = {\n    /** List of frames in playback order. Each frame is a function. */\n    frames: FrameAction[];\n    /** Total animation duration */\n    duration: number;\n    /** Animation duration of one frame */\n    durationFrame: number;\n    /** Ð¡allback at the end of the animation */\n    onAnimateEnd: AnimationSuccessAction;\n    /** Animation start time (Global Timer) */\n    startedAt: number;\n};\n\n/**\n * Book orientation\n */\nexport const enum Orientation {\n    PORTRAIT = 'portrait',\n    LANDSCAPE = 'landscape',\n}\n\n/**\n * Class responsible for rendering the book\n */\nexport abstract class Render {\n    protected readonly setting: FlipSetting;\n    protected readonly app: PageFlip;\n\n    /** Left static book page */\n    protected leftPage: Page = null;\n    /** Right static book page */\n    protected rightPage: Page = null;\n\n    /** Page currently flipping */\n    protected flippingPage: Page = null;\n    /** Next page at the time of flipping */\n    protected bottomPage: Page = null;\n\n    /** Current flipping direction */\n    protected direction: FlipDirection = null;\n    /** Current book orientation */\n    protected orientation: Orientation = null;\n    /** Ð¡urrent state of the shadows */\n    protected shadow: Shadow = null;\n    /** Ð¡urrent animation process */\n    protected animation: AnimationProcess = null;\n    /** Page borders while flipping */\n    protected pageRect: RectPoints = null;\n    /** Current book area */\n    private boundsRect: PageRect = null;\n\n    /** Timer started from start of rendering */\n    protected timer = 0;\n\n    /**\n     * Safari browser definitions for resolving a bug with a css property clip-area\n     *\n     * https://bugs.webkit.org/show_bug.cgi?id=126207\n     */\n    private safari = false;\n\n    protected constructor(app: PageFlip, setting: FlipSetting) {\n        this.setting = setting;\n        this.app = app;\n\n        // detect safari\n        const regex = new RegExp('Version\\\\/[\\\\d\\\\.]+.*Safari/');\n        this.safari = regex.exec(window.navigator.userAgent) !== null;\n    }\n\n    /**\n     * Rendering action on each requestAnimationFrame call. The entire rendering process is performed only in this method\n     */\n    protected abstract drawFrame(): void;\n\n    /**\n     * Executed when requestAnimationFrame is called. Performs the current animation process and call drawFrame()\n     *\n     * @param timer\n     */\n    private render(timer: number): void {\n        if (this.animation !== null) {\n            // Find current frame of animation\n            const frameIndex = Math.round(\n                (timer - this.animation.startedAt) / this.animation.durationFrame\n            );\n\n            if (frameIndex < this.animation.frames.length) {\n                this.animation.frames[frameIndex]();\n            } else {\n                this.animation.onAnimateEnd();\n                this.animation = null;\n            }\n        }\n\n        this.timer = timer;\n        this.drawFrame();\n    }\n\n    /**\n     * Running requestAnimationFrame, and rendering process\n     */\n    public start(): void {\n        this.update();\n\n        const loop = (timer: number): void => {\n            this.render(timer);\n            requestAnimationFrame(loop);\n        };\n\n        requestAnimationFrame(loop);\n    }\n\n    /**\n     * Start a new animation process\n     *\n     * @param {FrameAction[]} frames - Frame list\n     * @param {number} duration - total animation duration\n     * @param {AnimationSuccessAction} onAnimateEnd - Animation callback function\n     */\n    public startAnimation(\n        frames: FrameAction[],\n        duration: number,\n        onAnimateEnd: AnimationSuccessAction\n    ): void {\n        this.finishAnimation(); // finish the previous animation process\n\n        this.animation = {\n            frames,\n            duration,\n            durationFrame: duration / frames.length,\n            onAnimateEnd,\n            startedAt: this.timer,\n        };\n    }\n\n    /**\n     * End the current animation process and call the callback\n     */\n    public finishAnimation(): void {\n        if (this.animation !== null) {\n            this.animation.frames[this.animation.frames.length - 1]();\n\n            if (this.animation.onAnimateEnd !== null) {\n                this.animation.onAnimateEnd();\n            }\n        }\n\n        this.animation = null;\n    }\n\n    /**\n     * Recalculate the size of the displayed area, and update the page orientation\n     */\n    public update(): void {\n        this.boundsRect = null;\n        const orientation = this.calculateBoundsRect();\n\n        if (this.orientation !== orientation) {\n            this.orientation = orientation;\n            this.app.updateOrientation(orientation);\n        }\n    }\n\n    /**\n     * Calculate the size and position of the book depending on the parent element and configuration parameters\n     */\n    private calculateBoundsRect(): Orientation {\n        let orientation = Orientation.LANDSCAPE;\n\n        const blockWidth = this.getBlockWidth();\n        const middlePoint: Point = {\n            x: blockWidth / 2,\n            y: this.getBlockHeight() / 2,\n        };\n\n        const ratio = this.setting.width / this.setting.height;\n\n        let pageWidth = this.setting.width;\n        let pageHeight = this.setting.height;\n\n        let left = middlePoint.x - pageWidth;\n\n        if (this.setting.size === SizeType.STRETCH) {\n            if (blockWidth < this.setting.minWidth * 2 && this.app.getSettings().usePortrait)\n                orientation = Orientation.PORTRAIT;\n\n            pageWidth =\n                orientation === Orientation.PORTRAIT\n                    ? this.getBlockWidth()\n                    : this.getBlockWidth() / 2;\n\n            if (pageWidth > this.setting.maxWidth) pageWidth = this.setting.maxWidth;\n\n            pageHeight = pageWidth / ratio;\n            if (pageHeight > this.getBlockHeight()) {\n                pageHeight = this.getBlockHeight();\n                pageWidth = pageHeight * ratio;\n            }\n\n            left =\n                orientation === Orientation.PORTRAIT\n                    ? middlePoint.x - pageWidth / 2 - pageWidth\n                    : middlePoint.x - pageWidth;\n        } else {\n            if (blockWidth < pageWidth * 2) {\n                if (this.app.getSettings().usePortrait) {\n                    orientation = Orientation.PORTRAIT;\n                    left = middlePoint.x - pageWidth / 2 - pageWidth;\n                }\n            }\n        }\n\n        this.boundsRect = {\n            left,\n            top: middlePoint.y - pageHeight / 2,\n            width: pageWidth * 2,\n            height: pageHeight,\n            pageWidth: pageWidth,\n        };\n\n        return orientation;\n    }\n\n    /**\n     * Set the current parameters of the drop shadow\n     *\n     * @param {Point} pos - Shadow Position Start Point\n     * @param {number} angle - The angle of the shadows relative to the book\n     * @param {number} progress - Flipping progress in percent (0 - 100)\n     * @param {FlipDirection} direction - Flipping Direction, the direction of the shadow gradients\n     */\n    public setShadowData(\n        pos: Point,\n        angle: number,\n        progress: number,\n        direction: FlipDirection\n    ): void {\n        if (!this.app.getSettings().drawShadow) return;\n\n        const maxShadowOpacity = 100 * this.getSettings().maxShadowOpacity;\n\n        this.shadow = {\n            pos,\n            angle,\n            width: (((this.getRect().pageWidth * 3) / 4) * progress) / 100,\n            opacity: ((100 - progress) * maxShadowOpacity) / 100 / 100,\n            direction,\n            progress: progress * 2,\n        };\n    }\n\n    /**\n     * Clear shadow\n     */\n    public clearShadow(): void {\n        this.shadow = null;\n    }\n\n    /**\n     * Get parent block offset width\n     */\n    public getBlockWidth(): number {\n        return this.app.getUI().getDistElement().offsetWidth;\n    }\n\n    /**\n     * Get parent block offset height\n     */\n    public getBlockHeight(): number {\n        return this.app.getUI().getDistElement().offsetHeight;\n    }\n\n    /**\n     * Get current flipping direction\n     */\n    public getDirection(): FlipDirection {\n        return this.direction;\n    }\n\n    /**\n     * Ð¡urrent size and position of the book\n     */\n    public getRect(): PageRect {\n        if (this.boundsRect === null) this.calculateBoundsRect();\n\n        return this.boundsRect;\n    }\n\n    /**\n     * Get configuration object\n     */\n    public getSettings(): FlipSetting {\n        return this.app.getSettings();\n    }\n\n    /**\n     * Get current book orientation\n     */\n    public getOrientation(): Orientation {\n        return this.orientation;\n    }\n\n    /**\n     * Set page area while flipping\n     *\n     * @param direction\n     */\n    public setPageRect(pageRect: RectPoints): void {\n        this.pageRect = pageRect;\n    }\n\n    /**\n     * Set flipping direction\n     *\n     * @param direction\n     */\n    public setDirection(direction: FlipDirection): void {\n        this.direction = direction;\n    }\n\n    /**\n     * Set right static book page\n     *\n     * @param page\n     */\n    public setRightPage(page: Page): void {\n        if (page !== null) page.setOrientation(PageOrientation.RIGHT);\n\n        this.rightPage = page;\n    }\n\n    /**\n     * Set left static book page\n     * @param page\n     */\n    public setLeftPage(page: Page): void {\n        if (page !== null) page.setOrientation(PageOrientation.LEFT);\n\n        this.leftPage = page;\n    }\n\n    /**\n     * Set next page at the time of flipping\n     * @param page\n     */\n    public setBottomPage(page: Page): void {\n        if (page !== null)\n            page.setOrientation(\n                this.direction === FlipDirection.BACK ? PageOrientation.LEFT : PageOrientation.RIGHT\n            );\n\n        this.bottomPage = page;\n    }\n\n    /**\n     * Set currently flipping page\n     *\n     * @param page\n     */\n    public setFlippingPage(page: Page): void {\n        if (page !== null)\n            page.setOrientation(\n                this.direction === FlipDirection.FORWARD &&\n                    this.orientation !== Orientation.PORTRAIT\n                    ? PageOrientation.LEFT\n                    : PageOrientation.RIGHT\n            );\n\n        this.flippingPage = page;\n    }\n\n    /**\n     * Coordinate conversion function. Window coordinates -> to book coordinates\n     *\n     * @param {Point} pos - Global coordinates relative to the window\n     * @returns {Point} Coordinates relative to the book\n     */\n    public convertToBook(pos: Point): Point {\n        const rect = this.getRect();\n\n        return {\n            x: pos.x - rect.left,\n            y: pos.y - rect.top,\n        };\n    }\n\n    public isSafari(): boolean {\n        return this.safari;\n    }\n\n    /**\n     * Coordinate conversion function. Window coordinates -> to current coordinates of the working page\n     *\n     * @param {Point} pos - Global coordinates relative to the window\n     * @param {FlipDirection} direction  - Current flipping direction\n     *\n     * @returns {Point} Coordinates relative to the work page\n     */\n    public convertToPage(pos: Point, direction?: FlipDirection): Point {\n        if (!direction) direction = this.direction;\n\n        const rect = this.getRect();\n        const x =\n            direction === FlipDirection.FORWARD\n                ? pos.x - rect.left - rect.width / 2\n                : rect.width / 2 - pos.x + rect.left;\n\n        return {\n            x,\n            y: pos.y - rect.top,\n        };\n    }\n\n    /**\n     * Coordinate conversion function. Coordinates relative to the work page -> Window coordinates\n     *\n     * @param {Point} pos - Coordinates relative to the work page\n     * @param {FlipDirection} direction  - Current flipping direction\n     *\n     * @returns {Point} Global coordinates relative to the window\n     */\n    public convertToGlobal(pos: Point, direction?: FlipDirection): Point {\n        if (!direction) direction = this.direction;\n\n        if (pos == null) return null;\n\n        const rect = this.getRect();\n\n        const x =\n            direction === FlipDirection.FORWARD\n                ? pos.x + rect.left + rect.width / 2\n                : rect.width / 2 - pos.x + rect.left;\n\n        return {\n            x,\n            y: pos.y + rect.top,\n        };\n    }\n\n    /**\n     * Casting the coordinates of the corners of the rectangle in the coordinates relative to the window\n     *\n     * @param {RectPoints} rect - Coordinates of the corners of the rectangle relative to the work page\n     * @param {FlipDirection} direction  - Current flipping direction\n     *\n     * @returns {RectPoints} Coordinates of the corners of the rectangle relative to the window\n     */\n    public convertRectToGlobal(rect: RectPoints, direction?: FlipDirection): RectPoints {\n        if (!direction) direction = this.direction;\n\n        return {\n            topLeft: this.convertToGlobal(rect.topLeft, direction),\n            topRight: this.convertToGlobal(rect.topRight, direction),\n            bottomLeft: this.convertToGlobal(rect.bottomLeft, direction),\n            bottomRight: this.convertToGlobal(rect.bottomRight, direction),\n        };\n    }\n}\n","import { Orientation, Render } from './Render';\nimport { PageFlip } from '../PageFlip';\nimport { FlipDirection } from '../Flip/Flip';\nimport { PageOrientation } from '../Page/Page';\nimport { FlipSetting } from '../Settings';\n\n/**\n * Class responsible for rendering the Canvas book\n */\nexport class CanvasRender extends Render {\n    private readonly canvas: HTMLCanvasElement;\n    private readonly ctx: CanvasRenderingContext2D;\n\n    constructor(app: PageFlip, setting: FlipSetting, inCanvas: HTMLCanvasElement) {\n        super(app, setting);\n\n        this.canvas = inCanvas;\n        this.ctx = inCanvas.getContext('2d');\n    }\n\n    public getContext(): CanvasRenderingContext2D {\n        return this.ctx;\n    }\n\n    protected drawFrame(): void {\n        this.clear();\n\n        if (this.orientation !== Orientation.PORTRAIT)\n            if (this.leftPage != null) this.leftPage.simpleDraw(PageOrientation.LEFT);\n\n        if (this.rightPage != null) this.rightPage.simpleDraw(PageOrientation.RIGHT);\n\n        if (this.bottomPage != null) this.bottomPage.draw();\n\n        this.drawBookShadow();\n\n        if (this.flippingPage != null) this.flippingPage.draw();\n\n        if (this.shadow != null) {\n            this.drawOuterShadow();\n            this.drawInnerShadow();\n        }\n\n        const rect = this.getRect();\n\n        if (this.orientation === Orientation.PORTRAIT) {\n            this.ctx.beginPath();\n            this.ctx.rect(rect.left + rect.pageWidth, rect.top, rect.width, rect.height);\n            this.ctx.clip();\n        }\n    }\n\n    private drawBookShadow(): void {\n        const rect = this.getRect();\n\n        this.ctx.save();\n        this.ctx.beginPath();\n\n        const shadowSize = rect.width / 20;\n        this.ctx.rect(rect.left, rect.top, rect.width, rect.height);\n\n        const shadowPos = { x: rect.left + rect.width / 2 - shadowSize / 2, y: 0 };\n        this.ctx.translate(shadowPos.x, shadowPos.y);\n\n        const outerGradient = this.ctx.createLinearGradient(0, 0, shadowSize, 0);\n\n        outerGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n        outerGradient.addColorStop(0.4, 'rgba(0, 0, 0, 0.2)');\n        outerGradient.addColorStop(0.49, 'rgba(0, 0, 0, 0.1)');\n        outerGradient.addColorStop(0.5, 'rgba(0, 0, 0, 0.5)');\n        outerGradient.addColorStop(0.51, 'rgba(0, 0, 0, 0.4)');\n        outerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n\n        this.ctx.clip();\n\n        this.ctx.fillStyle = outerGradient;\n        this.ctx.fillRect(0, 0, shadowSize, rect.height * 2);\n\n        this.ctx.restore();\n    }\n\n    private drawOuterShadow(): void {\n        const rect = this.getRect();\n\n        this.ctx.save();\n        this.ctx.beginPath();\n\n        this.ctx.rect(rect.left, rect.top, rect.width, rect.height);\n\n        const shadowPos = this.convertToGlobal({ x: this.shadow.pos.x, y: this.shadow.pos.y });\n        this.ctx.translate(shadowPos.x, shadowPos.y);\n\n        this.ctx.rotate(Math.PI + this.shadow.angle + Math.PI / 2);\n\n        const outerGradient = this.ctx.createLinearGradient(0, 0, this.shadow.width, 0);\n\n        if (this.shadow.direction === FlipDirection.FORWARD) {\n            this.ctx.translate(0, -100);\n            outerGradient.addColorStop(0, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\n            outerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        } else {\n            this.ctx.translate(-this.shadow.width, -100);\n            outerGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n            outerGradient.addColorStop(1, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\n        }\n\n        this.ctx.clip();\n\n        this.ctx.fillStyle = outerGradient;\n        this.ctx.fillRect(0, 0, this.shadow.width, rect.height * 2);\n\n        this.ctx.restore();\n    }\n\n    private drawInnerShadow(): void {\n        const rect = this.getRect();\n\n        this.ctx.save();\n        this.ctx.beginPath();\n\n        const shadowPos = this.convertToGlobal({ x: this.shadow.pos.x, y: this.shadow.pos.y });\n\n        const pageRect = this.convertRectToGlobal(this.pageRect);\n        this.ctx.moveTo(pageRect.topLeft.x, pageRect.topLeft.y);\n        this.ctx.lineTo(pageRect.topRight.x, pageRect.topRight.y);\n        this.ctx.lineTo(pageRect.bottomRight.x, pageRect.bottomRight.y);\n        this.ctx.lineTo(pageRect.bottomLeft.x, pageRect.bottomLeft.y);\n        this.ctx.translate(shadowPos.x, shadowPos.y);\n\n        this.ctx.rotate(Math.PI + this.shadow.angle + Math.PI / 2);\n\n        const isw = (this.shadow.width * 3) / 4;\n        const innerGradient = this.ctx.createLinearGradient(0, 0, isw, 0);\n\n        if (this.shadow.direction === FlipDirection.FORWARD) {\n            this.ctx.translate(-isw, -100);\n\n            innerGradient.addColorStop(1, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\n            innerGradient.addColorStop(0.9, 'rgba(0, 0, 0, 0.05)');\n            innerGradient.addColorStop(0.7, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\n            innerGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n        } else {\n            this.ctx.translate(0, -100);\n\n            innerGradient.addColorStop(0, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\n            innerGradient.addColorStop(0.1, 'rgba(0, 0, 0, 0.05)');\n            innerGradient.addColorStop(0.3, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\n            innerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        }\n\n        this.ctx.clip();\n\n        this.ctx.fillStyle = innerGradient;\n        this.ctx.fillRect(0, 0, isw, rect.height * 2);\n\n        this.ctx.restore();\n    }\n\n    private clear(): void {\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n}\n","import { PageFlip } from '../PageFlip';\nimport { Point } from '../BasicTypes';\nimport { FlipSetting, SizeType } from '../Settings';\nimport { FlipCorner, FlippingState } from '../Flip/Flip';\nimport { Orientation } from '../Render/Render';\n\ntype SwipeData = {\n    point: Point;\n    time: number;\n};\n\n/**\n * UI Class, represents work with DOM\n */\nexport abstract class UI {\n    protected readonly app: PageFlip;\n    protected readonly wrapper: HTMLElement;\n    protected distElement: HTMLElement;\n\n    private touchPoint: SwipeData = null;\n    private readonly swipeTimeout = 250;\n    private readonly swipeDistance: number;\n\n    private onResize = (): void => {\n        this.update();\n    };\n\n    /**\n     * @constructor\n     *\n     * @param {HTMLElement} inBlock - Root HTML Element\n     * @param {PageFlip} app - PageFlip instanse\n     * @param {FlipSetting} setting - Configuration object\n     */\n    protected constructor(inBlock: HTMLElement, app: PageFlip, setting: FlipSetting) {\n        inBlock.classList.add('stf__parent');\n        // Add first wrapper\n        inBlock.insertAdjacentHTML('afterbegin', '<div class=\"stf__wrapper\"></div>');\n\n        this.wrapper = inBlock.querySelector('.stf__wrapper');\n\n        this.app = app;\n\n        const k = this.app.getSettings().usePortrait ? 1 : 2;\n\n        // Setting block sizes based on configuration\n        inBlock.style.minWidth = setting.minWidth * k + 'px';\n        inBlock.style.minHeight = setting.minHeight + 'px';\n\n        if (setting.size === SizeType.FIXED) {\n            inBlock.style.minWidth = setting.width * k + 'px';\n            inBlock.style.minHeight = setting.height + 'px';\n        }\n\n        if (setting.autoSize) {\n            inBlock.style.width = '100%';\n            inBlock.style.maxWidth = setting.maxWidth * 2 + 'px';\n        }\n\n        inBlock.style.display = 'block';\n\n        window.addEventListener('resize', this.onResize, false);\n        this.swipeDistance = setting.swipeDistance;\n    }\n\n    /**\n     * Destructor. Remove all HTML elements and all event handlers\n     */\n    public destroy(): void {\n        if (this.app.getSettings().useMouseEvents) this.removeHandlers();\n\n        this.distElement.remove();\n        this.wrapper.remove();\n    }\n\n    /**\n     * Updating child components when resizing\n     */\n    public abstract update(): void;\n\n    /**\n     * Get parent element for book\n     *\n     * @returns {HTMLElement}\n     */\n    public getDistElement(): HTMLElement {\n        return this.distElement;\n    }\n\n    /**\n     * Get wrapper element\n     *\n     * @returns {HTMLElement}\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapper;\n    }\n\n    /**\n     * Updates styles and sizes based on book orientation\n     *\n     * @param {Orientation} orientation - New book orientation\n     */\n    public setOrientationStyle(orientation: Orientation): void {\n        this.wrapper.classList.remove('--portrait', '--landscape');\n\n        if (orientation === Orientation.PORTRAIT) {\n            if (this.app.getSettings().autoSize)\n                this.wrapper.style.paddingBottom =\n                    (this.app.getSettings().height / this.app.getSettings().width) * 100 + '%';\n\n            this.wrapper.classList.add('--portrait');\n        } else {\n            if (this.app.getSettings().autoSize)\n                this.wrapper.style.paddingBottom =\n                    (this.app.getSettings().height / (this.app.getSettings().width * 2)) * 100 +\n                    '%';\n\n            this.wrapper.classList.add('--landscape');\n        }\n\n        this.update();\n    }\n\n    protected removeHandlers(): void {\n        window.removeEventListener('resize', this.onResize);\n\n        this.distElement.removeEventListener('mousedown', this.onMouseDown);\n        this.distElement.removeEventListener('touchstart', this.onTouchStart);\n        window.removeEventListener('mousemove', this.onMouseMove);\n        window.removeEventListener('touchmove', this.onTouchMove);\n        window.removeEventListener('mouseup', this.onMouseUp);\n        window.removeEventListener('touchend', this.onTouchEnd);\n    }\n\n    protected setHandlers(): void {\n        if (!this.app.getSettings().useMouseEvents) return;\n        \n        this.distElement.addEventListener('mousedown', this.onMouseDown);\n        this.distElement.addEventListener('touchstart', this.onTouchStart);\n        window.addEventListener('mousemove', this.onMouseMove);\n        window.addEventListener('touchmove', this.onTouchMove, {\n            passive: !this.app.getSettings().mobileScrollSupport,\n        });\n        window.addEventListener('mouseup', this.onMouseUp);\n        window.addEventListener('touchend', this.onTouchEnd);\n    }\n\n    /**\n     * Convert global coordinates to relative book coordinates\n     *\n     * @param x\n     * @param y\n     */\n    private getMousePos(x: number, y: number): Point {\n        const rect = this.distElement.getBoundingClientRect();\n\n        return {\n            x: x - rect.left,\n            y: y - rect.top,\n        };\n    }\n\n    private checkTarget(targer: EventTarget): boolean {\n        if (!this.app.getSettings().clickEventForward) return true;\n\n        if (['a', 'button','p','span'].includes((targer as HTMLElement).tagName.toLowerCase())) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private onMouseDown = (e: MouseEvent): void => {\n        if (this.checkTarget(e.target)) {\n            const pos = this.getMousePos(e.clientX, e.clientY);\n\n            this.app.startUserTouch(pos);\n\n            e.preventDefault();\n        }\n    };\n\n    private onTouchStart = (e: TouchEvent): void => {\n        if (this.checkTarget(e.target)) {\n            if (e.changedTouches.length > 0) {\n                const t = e.changedTouches[0];\n                const pos = this.getMousePos(t.clientX, t.clientY);\n\n                this.touchPoint = {\n                    point: pos,\n                    time: Date.now(),\n                };\n\n                // part of swipe detection\n                setTimeout(() => {\n                    if (this.touchPoint !== null) {\n                        this.app.startUserTouch(pos);\n                    }\n                }, this.swipeTimeout);\n\n                if (!this.app.getSettings().mobileScrollSupport) e.preventDefault();\n            }\n        }\n    };\n\n    private onMouseUp = (e: MouseEvent): void => {\n        const pos = this.getMousePos(e.clientX, e.clientY);\n\n        this.app.userStop(pos);\n    };\n\n    private onMouseMove = (e: MouseEvent): void => {\n        const pos = this.getMousePos(e.clientX, e.clientY);\n\n        this.app.userMove(pos, false);\n    };\n\n    private onTouchMove = (e: TouchEvent): void => {\n        if (e.changedTouches.length > 0) {\n            const t = e.changedTouches[0];\n            const pos = this.getMousePos(t.clientX, t.clientY);\n\n            if (this.app.getSettings().mobileScrollSupport) {\n                if (this.touchPoint !== null) {\n                    if (\n                        Math.abs(this.touchPoint.point.x - pos.x) > 10 ||\n                        this.app.getState() !== FlippingState.READ\n                    ) {\n                        if (e.cancelable) this.app.userMove(pos, true);\n                    }\n                }\n\n                if (this.app.getState() !== FlippingState.READ) {\n                    e.preventDefault();\n                }\n            } else {\n                this.app.userMove(pos, true);\n            }\n        }\n    };\n\n    private onTouchEnd = (e: TouchEvent): void => {\n        if (e.changedTouches.length > 0) {\n            const t = e.changedTouches[0];\n            const pos = this.getMousePos(t.clientX, t.clientY);\n            let isSwipe = false;\n\n            // swipe detection\n            if (this.touchPoint !== null) {\n                const dx = pos.x - this.touchPoint.point.x;\n                const distY = Math.abs(pos.y - this.touchPoint.point.y);\n\n                if (\n                    Math.abs(dx) > this.swipeDistance &&\n                    distY < this.swipeDistance * 2 &&\n                    Date.now() - this.touchPoint.time < this.swipeTimeout\n                ) {\n                    if (dx > 0) {\n                        this.app.flipPrev(\n                            this.touchPoint.point.y < this.app.getRender().getRect().height / 2\n                                ? FlipCorner.TOP\n                                : FlipCorner.BOTTOM\n                        );\n                    } else {\n                        this.app.flipNext(\n                            this.touchPoint.point.y < this.app.getRender().getRect().height / 2\n                                ? FlipCorner.TOP\n                                : FlipCorner.BOTTOM\n                        );\n                    }\n                    isSwipe = true;\n                }\n\n                this.touchPoint = null;\n            }\n\n            this.app.userStop(pos, isSwipe);\n        }\n    };\n}\n","import { UI } from './UI';\nimport { PageFlip } from '../PageFlip';\nimport { FlipSetting } from '../Settings';\n\n/**\n * UI for HTML mode\n */\nexport class HTMLUI extends UI {\n    constructor(\n        inBlock: HTMLElement,\n        app: PageFlip,\n        setting: FlipSetting,\n        items: NodeListOf<HTMLElement> | HTMLElement[]\n    ) {\n        super(inBlock, app, setting);\n\n        // Second wrapper to HTML page\n        this.wrapper.insertAdjacentHTML('afterbegin', '<div class=\"stf__block\"></div>');\n\n        this.distElement = inBlock.querySelector('.stf__block');\n        // @ts-ignore\n        for (const item of items) {\n            this.distElement.appendChild(item);\n        }\n\n        this.setHandlers();\n    }\n\n    /**\n     * Update page list from HTMLElements\n     *\n     * @param {(NodeListOf<HTMLElement>|HTMLElement[])} items - List of pages as HTML Element\n     */\n    public updateItems(items: NodeListOf<HTMLElement> | HTMLElement[]): void {\n        this.removeHandlers();\n\n        this.distElement.innerHTML = '';\n\n        for (const item of items) {\n            this.distElement.appendChild(item);\n        }\n\n        this.setHandlers();\n    }\n\n    public update(): void {\n        this.app.getRender().update();\n    }\n}\n","import {UI} from \"./UI\";\nimport {PageFlip} from \"../PageFlip\";\nimport {FlipSetting} from \"../Settings\";\n\n/**\n * UI for canvas mode\n */\nexport class CanvasUI extends UI {\n    private readonly canvas: HTMLCanvasElement;\n\n    constructor(inBlock: HTMLElement, app: PageFlip, setting: FlipSetting) {\n        super(inBlock, app, setting);\n\n        this.wrapper.innerHTML = '<canvas class=\"stf__canvas\"></canvas>';\n\n        this.canvas = inBlock.querySelectorAll('canvas')[0];\n\n        this.distElement = this.canvas;\n\n        this.resizeCanvas();\n        this.setHandlers();\n    }\n\n    private resizeCanvas(): void {\n        const cs = getComputedStyle(this.canvas);\n        const width = parseInt(cs.getPropertyValue('width'), 10);\n        const height = parseInt(cs.getPropertyValue('height'), 10);\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n\n    /**\n     * Get canvas element\n     */\n    public getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    public update(): void {\n        this.resizeCanvas();\n        this.app.getRender().update();\n    }\n}","import { PageFlip } from '../PageFlip';\n\n/**\n * Data type passed to the event handler\n */\nexport type DataType = number | string | boolean | object;\n\n/**\n * Type of object in event handlers\n */\nexport interface WidgetEvent {\n    data: DataType;\n    object: PageFlip;\n}\n\ntype EventCallback = (e: WidgetEvent) => void;\n\n/**\n * A class implementing a basic event model\n */\nexport abstract class EventObject {\n    private events = new Map<string, EventCallback[]>();\n\n    /**\n     * Add new event handler\n     *\n     * @param {string} eventName\n     * @param {EventCallback} callback\n     */\n    public on(eventName: string, callback: EventCallback): EventObject {\n        if (!this.events.has(eventName)) {\n            this.events.set(eventName, [callback]);\n        } else {\n            this.events.get(eventName).push(callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * Removing all handlers from an event\n     *\n     * @param {string} event - Event name\n     */\n    public off(event: string): void {\n        this.events.delete(event);\n    }\n\n    protected trigger(eventName: string, app: PageFlip, data: DataType = null): void {\n        if (!this.events.has(eventName)) return;\n\n        for (const callback of this.events.get(eventName)) {\n            callback({ data, object: app });\n        }\n    }\n}\n","import { Orientation, Render } from './Render';\nimport { PageFlip } from '../PageFlip';\nimport { FlipDirection } from '../Flip/Flip';\nimport { PageDensity, PageOrientation } from '../Page/Page';\nimport { HTMLPage } from '../Page/HTMLPage';\nimport { Helper } from '../Helper';\nimport { FlipSetting } from '../Settings';\n\n/**\n * Class responsible for rendering the HTML book\n */\nexport class HTMLRender extends Render {\n    /** Parent HTML Element */\n    private readonly element: HTMLElement;\n\n    /** Pages List as HTMLElements */\n    private readonly items: NodeListOf<HTMLElement> | HTMLElement[];\n\n    private outerShadow: HTMLElement = null;\n    private innerShadow: HTMLElement = null;\n    private hardShadow: HTMLElement = null;\n    private hardInnerShadow: HTMLElement = null;\n\n    /**\n     * @constructor\n     *\n     * @param {PageFlip} app - PageFlip object\n     * @param {FlipSetting} setting - Configuration object\n     * @param {HTMLElement} element - Parent HTML Element\n     */\n    constructor(\n        app: PageFlip,\n        setting: FlipSetting,\n        element: HTMLElement\n    ) {\n        super(app, setting);\n\n        this.element = element;\n\n        this.createShadows();\n    }\n\n    private createShadows(): void {\n        this.element.insertAdjacentHTML(\n            'beforeend',\n            `<div class=\"stf__outerShadow\"></div>\n             <div class=\"stf__innerShadow\"></div>\n             <div class=\"stf__hardShadow\"></div>\n             <div class=\"stf__hardInnerShadow\"></div>`\n        );\n\n        this.outerShadow = this.element.querySelector('.stf__outerShadow');\n        this.innerShadow = this.element.querySelector('.stf__innerShadow');\n        this.hardShadow = this.element.querySelector('.stf__hardShadow');\n        this.hardInnerShadow = this.element.querySelector('.stf__hardInnerShadow');\n    }\n\n    public clearShadow(): void {\n        super.clearShadow();\n\n        this.outerShadow.style.cssText = 'display: none';\n        this.innerShadow.style.cssText = 'display: none';\n        this.hardShadow.style.cssText = 'display: none';\n        this.hardInnerShadow.style.cssText = 'display: none';\n    }\n\n    /**\n     * Draw inner shadow to the hard page\n     */\n    private drawHardInnerShadow(): void {\n        const rect = this.getRect();\n\n        const progress =\n            this.shadow.progress > 100 ? 200 - this.shadow.progress : this.shadow.progress;\n\n        let innerShadowSize = ((100 - progress) * (2.5 * rect.pageWidth)) / 100 + 20;\n        if (innerShadowSize > rect.pageWidth) innerShadowSize = rect.pageWidth;\n\n        let newStyle = `\n            display: block;\n            z-index: ${(this.getSettings().startZIndex + 5).toString(10)};\n            width: ${innerShadowSize}px;\n            height: ${rect.height}px;\n            background: linear-gradient(to right,\n                rgba(0, 0, 0, ${(this.shadow.opacity * progress) / 100}) 5%,\n                rgba(0, 0, 0, 0) 100%);\n            left: ${rect.left + rect.width / 2}px;\n            transform-origin: 0 0;\n        `;\n\n        newStyle +=\n            (this.getDirection() === FlipDirection.FORWARD && this.shadow.progress > 100) ||\n            (this.getDirection() === FlipDirection.BACK && this.shadow.progress <= 100)\n                ? `transform: translate3d(0, 0, 0);`\n                : `transform: translate3d(0, 0, 0) rotateY(180deg);`;\n\n        this.hardInnerShadow.style.cssText = newStyle;\n    }\n\n    /**\n     * Draw outer shadow to the hard page\n     */\n    private drawHardOuterShadow(): void {\n        const rect = this.getRect();\n\n        const progress =\n            this.shadow.progress > 100 ? 200 - this.shadow.progress : this.shadow.progress;\n\n        let shadowSize = ((100 - progress) * (2.5 * rect.pageWidth)) / 100 + 20;\n        if (shadowSize > rect.pageWidth) shadowSize = rect.pageWidth;\n\n        let newStyle = `\n            display: block;\n            z-index: ${(this.getSettings().startZIndex + 4).toString(10)};\n            width: ${shadowSize}px;\n            height: ${rect.height}px;\n            background: linear-gradient(to left, rgba(0, 0, 0, ${\n                this.shadow.opacity\n            }) 5%, rgba(0, 0, 0, 0) 100%);\n            left: ${rect.left + rect.width / 2}px;\n            transform-origin: 0 0;\n        `;\n\n        newStyle +=\n            (this.getDirection() === FlipDirection.FORWARD && this.shadow.progress > 100) ||\n            (this.getDirection() === FlipDirection.BACK && this.shadow.progress <= 100)\n                ? `transform: translate3d(0, 0, 0) rotateY(180deg);`\n                : `transform: translate3d(0, 0, 0);`;\n\n        this.hardShadow.style.cssText = newStyle;\n    }\n\n    /**\n     * Draw inner shadow to the soft page\n     */\n    private drawInnerShadow(): void {\n        const rect = this.getRect();\n\n        const innerShadowSize = (this.shadow.width * 3) / 4;\n        const shadowTranslate = this.getDirection() === FlipDirection.FORWARD ? innerShadowSize : 0;\n\n        const shadowDirection =\n            this.getDirection() === FlipDirection.FORWARD ? 'to left' : 'to right';\n\n        const shadowPos = this.convertToGlobal(this.shadow.pos);\n\n        const angle = this.shadow.angle + (3 * Math.PI) / 2;\n\n        const clip = [\n            this.pageRect.topLeft,\n            this.pageRect.topRight,\n            this.pageRect.bottomRight,\n            this.pageRect.bottomLeft,\n        ];\n\n        let polygon = 'polygon( ';\n        for (const p of clip) {\n            let g =\n                this.getDirection() === FlipDirection.BACK\n                    ? {\n                          x: -p.x + this.shadow.pos.x,\n                          y: p.y - this.shadow.pos.y,\n                      }\n                    : {\n                          x: p.x - this.shadow.pos.x,\n                          y: p.y - this.shadow.pos.y,\n                      };\n\n            g = Helper.GetRotatedPoint(g, { x: shadowTranslate, y: 100 }, angle);\n\n            polygon += g.x + 'px ' + g.y + 'px, ';\n        }\n        polygon = polygon.slice(0, -2);\n        polygon += ')';\n\n        const newStyle = `\n            display: block;\n            z-index: ${(this.getSettings().startZIndex + 10).toString(10)};\n            width: ${innerShadowSize}px;\n            height: ${rect.height * 2}px;\n            background: linear-gradient(${shadowDirection},\n                rgba(0, 0, 0, ${this.shadow.opacity}) 5%,\n                rgba(0, 0, 0, 0.05) 15%,\n                rgba(0, 0, 0, ${this.shadow.opacity}) 35%,\n                rgba(0, 0, 0, 0) 100%);\n            transform-origin: ${shadowTranslate}px 100px;\n            transform: translate3d(${shadowPos.x - shadowTranslate}px, ${\n            shadowPos.y - 100\n        }px, 0) rotate(${angle}rad);\n            clip-path: ${polygon};\n            -webkit-clip-path: ${polygon};\n        `;\n\n        this.innerShadow.style.cssText = newStyle;\n    }\n\n    /**\n     * Draw outer shadow to the soft page\n     */\n    private drawOuterShadow(): void {\n        const rect = this.getRect();\n\n        const shadowPos = this.convertToGlobal({ x: this.shadow.pos.x, y: this.shadow.pos.y });\n\n        const angle = this.shadow.angle + (3 * Math.PI) / 2;\n        const shadowTranslate = this.getDirection() === FlipDirection.BACK ? this.shadow.width : 0;\n\n        const shadowDirection =\n            this.getDirection() === FlipDirection.FORWARD ? 'to right' : 'to left';\n\n        const clip = [\n            { x: 0, y: 0 },\n            { x: rect.pageWidth, y: 0 },\n            { x: rect.pageWidth, y: rect.height },\n            { x: 0, y: rect.height },\n        ];\n\n        let polygon = 'polygon( ';\n        for (const p of clip) {\n            if (p !== null) {\n                let g =\n                    this.getDirection() === FlipDirection.BACK\n                        ? {\n                              x: -p.x + this.shadow.pos.x,\n                              y: p.y - this.shadow.pos.y,\n                          }\n                        : {\n                              x: p.x - this.shadow.pos.x,\n                              y: p.y - this.shadow.pos.y,\n                          };\n\n                g = Helper.GetRotatedPoint(g, { x: shadowTranslate, y: 100 }, angle);\n\n                polygon += g.x + 'px ' + g.y + 'px, ';\n            }\n        }\n\n        polygon = polygon.slice(0, -2);\n        polygon += ')';\n\n        const newStyle = `\n            display: block;\n            z-index: ${(this.getSettings().startZIndex + 10).toString(10)};\n            width: ${this.shadow.width}px;\n            height: ${rect.height * 2}px;\n            background: linear-gradient(${shadowDirection}, rgba(0, 0, 0, ${\n            this.shadow.opacity\n        }), rgba(0, 0, 0, 0));\n            transform-origin: ${shadowTranslate}px 100px;\n            transform: translate3d(${shadowPos.x - shadowTranslate}px, ${\n            shadowPos.y - 100\n        }px, 0) rotate(${angle}rad);\n            clip-path: ${polygon};\n            -webkit-clip-path: ${polygon};\n        `;\n\n        this.outerShadow.style.cssText = newStyle;\n    }\n\n    /**\n     * Draw left static page\n     */\n    private drawLeftPage(): void {\n        if (this.orientation === Orientation.PORTRAIT || this.leftPage === null) return;\n\n        if (\n            this.direction === FlipDirection.BACK &&\n            this.flippingPage !== null &&\n            this.flippingPage.getDrawingDensity() === PageDensity.HARD\n        ) {\n            (this.leftPage as HTMLPage).getElement().style.zIndex = (\n                this.getSettings().startZIndex + 5\n            ).toString(10);\n\n            this.leftPage.setHardDrawingAngle(180 + this.flippingPage.getHardAngle());\n            this.leftPage.draw(this.flippingPage.getDrawingDensity());\n        } else {\n            this.leftPage.simpleDraw(PageOrientation.LEFT);\n        }\n    }\n\n    /**\n     * Draw right static page\n     */\n    private drawRightPage(): void {\n        if (this.rightPage === null) return;\n\n        if (\n            this.direction === FlipDirection.FORWARD &&\n            this.flippingPage !== null &&\n            this.flippingPage.getDrawingDensity() === PageDensity.HARD\n        ) {\n            (this.rightPage as HTMLPage).getElement().style.zIndex = (\n                this.getSettings().startZIndex + 5\n            ).toString(10);\n\n            this.rightPage.setHardDrawingAngle(180 + this.flippingPage.getHardAngle());\n            this.rightPage.draw(this.flippingPage.getDrawingDensity());\n        } else {\n            this.rightPage.simpleDraw(PageOrientation.RIGHT);\n        }\n    }\n\n    /**\n     * Draw the next page at the time of flipping\n     */\n    private drawBottomPage(): void {\n        if (this.bottomPage === null) return;\n\n        const tempDensity =\n            this.flippingPage != null ? this.flippingPage.getDrawingDensity() : null;\n\n        if (!(this.orientation === Orientation.PORTRAIT && this.direction === FlipDirection.BACK)) {\n            (this.bottomPage as HTMLPage).getElement().style.zIndex = (\n                this.getSettings().startZIndex + 3\n            ).toString(10);\n\n            this.bottomPage.draw(tempDensity);\n        }\n    }\n\n    protected drawFrame(): void {\n        this.clear();\n\n        this.drawLeftPage();\n\n        this.drawRightPage();\n\n        this.drawBottomPage();\n\n        if (this.flippingPage != null) {\n            (this.flippingPage as HTMLPage).getElement().style.zIndex = (\n                this.getSettings().startZIndex + 5\n            ).toString(10);\n\n            this.flippingPage.draw();\n        }\n\n        if (this.shadow != null && this.flippingPage !== null) {\n            if (this.flippingPage.getDrawingDensity() === PageDensity.SOFT) {\n                this.drawOuterShadow();\n                this.drawInnerShadow();\n            } else {\n                this.drawHardOuterShadow();\n                this.drawHardInnerShadow();\n            }\n        }\n    }\n\n    private clear(): void {\n        for (const page of this.app.getPageCollection().getPages()) {\n            if (\n                page !== this.leftPage &&\n                page !== this.rightPage &&\n                page !== this.flippingPage &&\n                page !== this.bottomPage\n            ) {\n                (page as HTMLPage).getElement().style.cssText = 'display: none';\n            }\n\n            if (page.getTemporaryCopy() !== this.flippingPage) {\n                page.hideTemporaryCopy();\n            }\n        }\n    }\n\n    public update(): void {\n        super.update();\n\n        if (this.rightPage !== null) {\n            this.rightPage.setOrientation(PageOrientation.RIGHT);\n        }\n\n        if (this.leftPage !== null) {\n            this.leftPage.setOrientation(PageOrientation.LEFT);\n        }\n    }\n}\n","/**\n * Book size calculation type\n */\nexport const enum SizeType {\n    /** Dimensions are fixed */\n    FIXED = 'fixed',\n    /** Dimensions are calculated based on the parent element */\n    STRETCH = 'stretch',\n}\n\n/**\n * Configuration object\n */\nexport interface FlipSetting {\n    /** Page number from which to start viewing */\n    startPage: number;\n    /** Whether the book will be stretched under the parent element or not */\n    size: SizeType;\n\n    width: number;\n    height: number;\n\n    minWidth: number;\n    maxWidth: number;\n    minHeight: number;\n    maxHeight: number;\n\n    /** Draw shadows or not when page flipping */\n    drawShadow: boolean;\n    /** Flipping animation time */\n    flippingTime: number;\n\n    /** Enable switching to portrait mode */\n    usePortrait: boolean;\n    /** Initial value to z-index */\n    startZIndex: number;\n    /** If this value is true, the parent element will be equal to the size of the book */\n    autoSize: boolean;\n    /** Shadow intensity (1: max intensity, 0: hidden shadows) */\n    maxShadowOpacity: number;\n\n    /** If this value is true, the first and the last pages will be marked as hard and will be shown in single page mode */\n    showCover: boolean;\n    /** Disable content scrolling when touching a book on mobile devices */\n    mobileScrollSupport: boolean;\n\n    /** Set the forward event of clicking on child elements (buttons, links) */\n    clickEventForward: boolean;\n\n    /** Using mouse and touch events to page flipping */\n    useMouseEvents: boolean;\n\n    swipeDistance: number;\n}\n\nexport class Settings {\n    private _default: FlipSetting = {\n        startPage: 0,\n        size: SizeType.FIXED,\n        width: 0,\n        height: 0,\n        minWidth: 0,\n        maxWidth: 0,\n        minHeight: 0,\n        maxHeight: 0,\n        drawShadow: true,\n        flippingTime: 1000,\n        usePortrait: true,\n        startZIndex: 0,\n        autoSize: true,\n        maxShadowOpacity: 1,\n        showCover: false,\n        mobileScrollSupport: true,\n        swipeDistance: 30,\n        clickEventForward: true,\n        useMouseEvents: true\n    };\n\n    /**\n     * Processing parameters received from the user. Substitution default values\n     *\n     * @param userSetting\n     * @returns {FlipSetting} Ð¡onfiguration object\n     */\n    public getSettings(userSetting: Record<string, number | string | boolean>): FlipSetting {\n        const result = this._default;\n        Object.assign(result, userSetting);\n\n        if (result.size !== SizeType.STRETCH && result.size !== SizeType.FIXED)\n            throw new Error('Invalid size type. Available only \"fixed\" and \"stretch\" value');\n\n        if (result.width <= 0 || result.height <= 0)\n            throw new Error('Invalid width or height');\n\n        if (result.flippingTime <= 0)\n            throw new Error('Invalid flipping time');\n\n        if (result.size === SizeType.STRETCH) {\n            if (result.minWidth <= 0) result.minWidth = 100;\n\n            if (result.maxWidth < result.minWidth) result.maxWidth = 2000;\n\n            if (result.minHeight <= 0) result.minHeight = 100;\n\n            if (result.maxHeight < result.minHeight) result.maxHeight = 2000;\n        } else {\n            result.minWidth = result.width;\n            result.maxWidth = result.width;\n            result.minHeight = result.height;\n            result.maxHeight = result.height;\n        }\n\n        return result;\n    }\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { PageCollection } from './Collection/PageCollection';\nimport { ImagePageCollection } from './Collection/ImagePageCollection';\nimport { HTMLPageCollection } from './Collection/HTMLPageCollection';\nimport { PageRect, Point } from './BasicTypes';\nimport { Flip, FlipCorner, FlippingState } from './Flip/Flip';\nimport { Orientation, Render } from './Render/Render';\nimport { CanvasRender } from './Render/CanvasRender';\nimport { HTMLUI } from './UI/HTMLUI';\nimport { CanvasUI } from './UI/CanvasUI';\nimport { Helper } from './Helper';\nimport { Page } from './Page/Page';\nimport { EventObject } from './Event/EventObject';\nimport { HTMLRender } from './Render/HTMLRender';\nimport { FlipSetting, Settings } from './Settings';\nimport { UI } from './UI/UI';\n\nimport './Style/stPageFlip.css';\n\n/**\n * Class representing a main PageFlip object\n *\n * @extends EventObject\n */\nexport class PageFlip extends EventObject {\n    private mousePosition: Point;\n    private isUserTouch = false;\n    private isUserMove = false;\n\n    private readonly setting: FlipSetting = null;\n    private readonly block: HTMLElement; // Root HTML Element\n\n    private pages: PageCollection = null;\n    private flipController: Flip;\n    private render: Render;\n\n    private ui: UI;\n\n    /**\n     * Create a new PageFlip instance\n     *\n     * @constructor\n     * @param {HTMLElement} inBlock - Root HTML Element\n     * @param {Object} setting - Configuration object\n     */\n    constructor(inBlock: HTMLElement, setting: Record<string, number | string | boolean>) {\n        super();\n\n        this.setting = new Settings().getSettings(setting);\n        this.block = inBlock;\n    }\n\n    /**\n     * Destructor. Remove a root HTML element and all event handlers\n     */\n    public destroy(): void {\n        this.ui.destroy();\n        this.block.remove();\n    }\n\n    /**\n     * Update the render area. Re-show current page.\n     */\n    public update(): void {\n        this.render.update();\n        this.pages.show();\n    }\n\n    /**\n     * Load pages from images on the Canvas mode\n     *\n     * @param {string[]} imagesHref - List of paths to images\n     */\n    public loadFromImages(imagesHref: string[]): void {\n        this.ui = new CanvasUI(this.block, this, this.setting);\n\n        const canvas = (this.ui as CanvasUI).getCanvas();\n        this.render = new CanvasRender(this, this.setting, canvas);\n\n        this.flipController = new Flip(this.render, this);\n\n        this.pages = new ImagePageCollection(this, this.render, imagesHref);\n        this.pages.load();\n\n        this.render.start();\n\n        this.pages.show(this.setting.startPage);\n\n        // safari fix\n        setTimeout(() => {\n            this.ui.update();\n            this.trigger('init', this, {\n                page: this.setting.startPage,\n                mode: this.render.getOrientation(),\n            });\n        }, 1);\n    }\n\n    /**\n     * Load pages from HTML elements on the HTML mode\n     *\n     * @param {(NodeListOf<HTMLElement>|HTMLElement[])} items - List of pages as HTML Element\n     */\n    public loadFromHTML(items: NodeListOf<HTMLElement> | HTMLElement[]): void {\n        this.ui = new HTMLUI(this.block, this, this.setting, items);\n\n        this.render = new HTMLRender(this, this.setting, this.ui.getDistElement());\n\n        this.flipController = new Flip(this.render, this);\n\n        this.pages = new HTMLPageCollection(this, this.render, this.ui.getDistElement(), items);\n        this.pages.load();\n\n        this.render.start();\n\n        this.pages.show(this.setting.startPage);\n\n        // safari fix\n        setTimeout(() => {\n            this.ui.update();\n            this.trigger('init', this, {\n                page: this.setting.startPage,\n                mode: this.render.getOrientation(),\n            });\n        }, 1);\n    }\n\n    /**\n     * Update current pages from images\n     *\n     * @param {string[]} imagesHref - List of paths to images\n     */\n    public updateFromImages(imagesHref: string[]): void {\n        const current = this.pages.getCurrentPageIndex();\n\n        this.pages.destroy();\n        this.pages = new ImagePageCollection(this, this.render, imagesHref);\n        this.pages.load();\n\n        this.pages.show(current);\n        this.trigger('update', this, {\n            page: current,\n            mode: this.render.getOrientation(),\n        });\n    }\n\n    /**\n     * Update current pages from HTML\n     *\n     * @param {(NodeListOf<HTMLElement>|HTMLElement[])} items - List of pages as HTML Element\n     */\n    public updateFromHtml(items: NodeListOf<HTMLElement> | HTMLElement[]): void {\n        const current = this.pages.getCurrentPageIndex();\n\n        this.pages.destroy();\n        this.pages = new HTMLPageCollection(this, this.render, this.ui.getDistElement(), items);\n        this.pages.load();\n        (this.ui as HTMLUI).updateItems(items);\n\n        this.pages.show(current);\n        this.trigger('update', this, {\n            page: current,\n            mode: this.render.getOrientation(),\n        });\n    }\n\n    /**\n     * Turn to the previous page (without animation)\n     */\n    public turnToPrevPage(): void {\n        this.pages.showPrev();\n    }\n\n    /**\n     * Turn to the next page (without animation)\n     */\n    public turnToNextPage(): void {\n        this.pages.showNext();\n    }\n\n    /**\n     * Turn to the specified page number (without animation)\n     *\n     * @param {number} page - New page number\n     */\n    public turnToPage(page: number): void {\n        this.pages.show(page);\n    }\n\n    /**\n     * Turn to the next page (with animation)\n     *\n     * @param {FlipCorner} corner - Active page corner when turning\n     */\n    public flipNext(corner: FlipCorner = FlipCorner.TOP): void {\n        this.flipController.flipNext(corner);\n    }\n\n    /**\n     * Turn to the prev page (with animation)\n     *\n     * @param {FlipCorner} corner - Active page corner when turning\n     */\n    public flipPrev(corner: FlipCorner = FlipCorner.TOP): void {\n        this.flipController.flipPrev(corner);\n    }\n\n    /**\n     * Turn to the specified page number (with animation)\n     *\n     * @param {number} page - New page number\n     * @param {FlipCorner} corner - Active page corner when turning\n     */\n    public flip(page: number, corner: FlipCorner = FlipCorner.TOP): void {\n        this.flipController.flipToPage(page, corner);\n    }\n\n    /**\n     * Call a state change event trigger\n     *\n     * @param {FlippingState} newState - New  state of the object\n     */\n    public updateState(newState: FlippingState): void {\n        this.trigger('changeState', this, newState);\n    }\n\n    /**\n     * Call a page number change event trigger\n     *\n     * @param {number} newPage - New page Number\n     */\n    public updatePageIndex(newPage: number): void {\n        this.trigger('flip', this, newPage);\n    }\n\n    /**\n     * Call a page orientation change event trigger. Update UI and rendering area\n     *\n     * @param {Orientation} newOrientation - New page orientation (portrait, landscape)\n     */\n    public updateOrientation(newOrientation: Orientation): void {\n        this.ui.setOrientationStyle(newOrientation);\n        this.update();\n        this.trigger('changeOrientation', this, newOrientation);\n    }\n\n    /**\n     * Get the total number of pages in a book\n     *\n     * @returns {number}\n     */\n    public getPageCount(): number {\n        return this.pages.getPageCount();\n    }\n\n    /**\n     * Get the index of the current page in the page list (starts at 0)\n     *\n     * @returns {number}\n     */\n    public getCurrentPageIndex(): number {\n        return this.pages.getCurrentPageIndex();\n    }\n\n    /**\n     * Get page from collection by number\n     *\n     * @param {number} pageIndex\n     * @returns {Page}\n     */\n    public getPage(pageIndex: number): Page {\n        return this.pages.getPage(pageIndex);\n    }\n\n    /**\n     * Get the current rendering object\n     *\n     * @returns {Render}\n     */\n    public getRender(): Render {\n        return this.render;\n    }\n\n    /**\n     * Get current object responsible for flipping\n     *\n     * @returns {Flip}\n     */\n    public getFlipController(): Flip {\n        return this.flipController;\n    }\n\n    /**\n     * Get current page orientation\n     *\n     * @returns {Orientation} Ð¡urrent orientation: portrait or landscape\n     */\n    public getOrientation(): Orientation {\n        return this.render.getOrientation();\n    }\n\n    /**\n     * Get current book sizes and position\n     *\n     * @returns {PageRect}\n     */\n    public getBoundsRect(): PageRect {\n        return this.render.getRect();\n    }\n\n    /**\n     * Get configuration object\n     *\n     * @returns {FlipSetting}\n     */\n    public getSettings(): FlipSetting {\n        return this.setting;\n    }\n\n    /**\n     * Get UI object\n     *\n     * @returns {UI}\n     */\n    public getUI(): UI {\n        return this.ui;\n    }\n\n    /**\n     * Get current flipping state\n     *\n     * @returns {FlippingState}\n     */\n    public getState(): FlippingState {\n        return this.flipController.getState();\n    }\n\n    /**\n     * Get page collection\n     *\n     * @returns {PageCollection}\n     */\n    public getPageCollection(): PageCollection {\n        return this.pages;\n    }\n\n    /**\n     * Start page turning. Called when a user clicks or touches\n     *\n     * @param {Point} pos - Touch position in coordinates relative to the book\n     */\n    public startUserTouch(pos: Point): void {\n        this.mousePosition = pos; // Save touch position\n        this.isUserTouch = true;\n        this.isUserMove = false;\n    }\n\n    /**\n     * Called when a finger / mouse moves\n     *\n     * @param {Point} pos - Touch position in coordinates relative to the book\n     * @param {boolean} isTouch - True if there was a touch event, not a mouse click\n     */\n    public userMove(pos: Point, isTouch: boolean): void {\n        if (!this.isUserTouch && !isTouch) {\n            this.flipController.showCorner(pos); // fold Page Corner\n        } else if (this.isUserTouch) {\n            if (Helper.GetDistanceBetweenTwoPoint(this.mousePosition, pos) > 5) {\n                this.isUserMove = true;\n                this.flipController.fold(pos);\n            }\n        }\n    }\n\n    /**\n     * Ð¡alled when the user has stopped touching\n     *\n     * @param {Point} pos - Touch end position in coordinates relative to the book\n     * @param {boolean} isSwipe - true if there was a mobile swipe event\n     */\n    public userStop(pos: Point, isSwipe = false): void {\n        if (this.isUserTouch) {\n            this.isUserTouch = false;\n\n            if (!isSwipe) {\n                if (!this.isUserMove) this.flipController.flip(pos);\n                else this.flipController.stopMove();\n            }\n        }\n    }\n}\n","import React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\n\nimport { PageFlip } from 'super-paperedflip/src/PageFlip';\nimport { IFlipSetting, IEventProps } from './settings';\n\ninterface IProps extends IFlipSetting, IEventProps {\n  className: string;\n  style: React.CSSProperties;\n  children: React.ReactNode;\n  renderOnlyPageLengthChange?: boolean;\n}\n\nconst HTMLFlipBookForward = React.forwardRef(\n  (props: any, ref: React.MutableRefObject<PageFlip>) => {\n    const htmlElementRef = useRef<HTMLDivElement>(null);\n    const childRef = useRef<HTMLElement[]>([]);\n    const pageFlip = useRef<PageFlip>();\n\n    const [pages, setPages] = useState<ReactElement[]>([]);\n\n    useImperativeHandle(ref, (): any => ({\n      pageFlip: () => pageFlip.current,\n    }));\n\n    const refreshOnPageDelete = useCallback(() => {\n      if (pageFlip.current) {\n        pageFlip.current.clear();\n      }\n    }, []);\n\n    const removeHandlers = useCallback(() => {\n      const flip = pageFlip.current;\n\n      if (flip) {\n        flip.off('flip');\n        flip.off('changeOrientation');\n        flip.off('changeState');\n        flip.off('init');\n        flip.off('update');\n      }\n    }, []);\n\n    useEffect(() => {\n      childRef.current = [];\n\n      if (props.children) {\n        const childList = React.Children.map(props.children, (child) => {\n          return React.cloneElement(child as ReactElement, {\n            ref: (dom) => {\n              if (dom) {\n                childRef.current.push(dom);\n              }\n            },\n          });\n        });\n\n        if (!props.renderOnlyPageLengthChange || pages.length !== childList.length) {\n          if (childList.length < pages.length) {\n            refreshOnPageDelete();\n          }\n\n          setPages(childList);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.children]);\n\n    useEffect(() => {\n      const setHandlers = () => {\n        const flip = pageFlip.current;\n\n        if (flip) {\n          if (props.onFlip) {\n            flip.on('flip', (e: unknown) => props.onFlip(e));\n          }\n\n          if (props.onChangeOrientation) {\n            flip.on('changeOrientation', (e: unknown) => props.onChangeOrientation(e));\n          }\n\n          if (props.onChangeState) {\n            flip.on('changeState', (e: unknown) => props.onChangeState(e));\n          }\n\n          if (props.onInit) {\n            flip.on('init', (e: unknown) => props.onInit(e));\n          }\n\n          if (props.onUpdate) {\n            flip.on('update', (e: unknown) => props.onUpdate(e));\n          }\n        }\n      };\n\n      if (pages.length > 0 && childRef.current.length > 0) {\n        removeHandlers();\n\n        if (htmlElementRef.current && !pageFlip.current) {\n          pageFlip.current = new PageFlip(htmlElementRef.current, props);\n        }\n\n        if (!pageFlip.current.getFlipController()) {\n          pageFlip.current.loadFromHTML(childRef.current);\n        } else {\n          pageFlip.current.updateFromHtml(childRef.current);\n        }\n\n        setHandlers();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pages]);\n\n    return (\n      <div ref={htmlElementRef} className={props.className} style={props.style}>\n        {pages}\n      </div>\n    );\n  }\n);\n\nexport const HTMLFlipBook = React.memo(HTMLFlipBookForward);\n"],"names":["React","useRef","useState","useImperativeHandle","useCallback","useEffect"],"mappings":";;;;;;;;AAoCA;;AAEG;MACmB,IAAI,CAAA;IActB,WAAsB,CAAA,MAAc,EAAE,OAAoB,EAAA;QACtD,IAAI,CAAC,KAAK,GAAG;AACT,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,IAAI,EAAE,EAAE;YACR,QAAQ,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACxB,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,gBAAgB,EAAE,CAAC;SACtB,CAAC;AAEF,QAAA,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;AAC9B,QAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC;AAE7C,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;AAqBD;;;;AAIG;AACI,IAAA,UAAU,CAAC,OAAoB,EAAA;AAClC,QAAA,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;AAC9B,QAAA,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;KACpC;AAED;;;;AAIG;AACI,IAAA,iBAAiB,CAAC,OAAoB,EAAA;AACzC,QAAA,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;KACpC;AAED;;;;AAIG;AACI,IAAA,WAAW,CAAC,OAAc,EAAA;AAC7B,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC;KACjC;AAED;;;;AAIG;AACI,IAAA,QAAQ,CAAC,KAAa,EAAA;AACzB,QAAA,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;KAC5B;AAED;;;;AAIG;AACI,IAAA,OAAO,CAAC,IAAa,EAAA;AACxB,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;KAC1B;AAED;;;;AAIG;AACI,IAAA,mBAAmB,CAAC,KAAa,EAAA;AACpC,QAAA,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC;KACvC;AAED;;;;AAIG;AACI,IAAA,YAAY,CAAC,KAAa,EAAA;AAC7B,QAAA,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;AAC7B,QAAA,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC;KACvC;AAED;;;;AAIG;AACI,IAAA,cAAc,CAAC,WAA4B,EAAA;AAC9C,QAAA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAClC;AAED;;AAEG;IACI,iBAAiB,GAAA;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC;KACjC;AAED;;AAEG;IACI,UAAU,GAAA;QACb,OAAO,IAAI,CAAC,cAAc,CAAC;KAC9B;AAED;;AAEG;IACI,YAAY,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;KAC/B;AAKJ;;ACpLD;;AAEG;AACG,MAAO,SAAU,SAAQ,IAAI,CAAA;AAM/B,IAAA,WAAA,CAAY,MAAc,EAAE,IAAY,EAAE,OAAoB,EAAA;AAC1D,QAAA,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QANV,IAAK,CAAA,KAAA,GAAqB,IAAI,CAAC;QACxC,IAAM,CAAA,MAAA,GAAG,KAAK,CAAC;QAEf,IAAY,CAAA,YAAA,GAAG,CAAC,CAAC;AAKrB,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AACzB,QAAA,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;KACzB;AAEM,IAAA,IAAI,CAAC,WAAyB,EAAA;QACjC,MAAM,GAAG,GAAI,IAAI,CAAC,MAAuB,CAAC,UAAU,EAAE,CAAC;AAEvD,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACjE,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC;QAClD,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;QAEhD,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QACpC,GAAG,CAAC,SAAS,EAAE,CAAC;QAEhB,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YAC3B,IAAI,CAAC,KAAK,IAAI,EAAE;gBACZ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACnC,gBAAA,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAChD,aAAA;AACJ,SAAA;QAED,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE7B,GAAG,CAAC,IAAI,EAAE,CAAC;AAEX,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACd,YAAA,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAC/D,SAAA;AAAM,aAAA;AACH,YAAA,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAC1D,SAAA;QAED,GAAG,CAAC,OAAO,EAAE,CAAC;KACjB;AAEM,IAAA,UAAU,CAAC,MAAuB,EAAA;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACnC,MAAM,GAAG,GAAI,IAAI,CAAC,MAAuB,CAAC,UAAU,EAAE,CAAC;AAEvD,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACjC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,MAAM,CAAC,GAAG,MAAM,KAAA,CAAA,+BAA6B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;AAEpF,QAAA,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;AAEnB,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACd,YAAA,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACzD,SAAA;AAAM,aAAA;AACH,YAAA,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAC1D,SAAA;KACJ;AAEO,IAAA,UAAU,CACd,GAA6B,EAC7B,QAAe,EACf,SAAiB,EACjB,UAAkB,EAAA;QAElB,GAAG,CAAC,SAAS,EAAE,CAAC;AAChB,QAAA,GAAG,CAAC,WAAW,GAAG,oBAAoB,CAAC;AACvC,QAAA,GAAG,CAAC,SAAS,GAAG,oBAAoB,CAAC;AACrC,QAAA,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;QAClB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;QACxE,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,IAAI,EAAE,CAAC;AAEX,QAAA,MAAM,WAAW,GAAU;AACvB,YAAA,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC;AAC7B,YAAA,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;SACjC,CAAC;QAEF,GAAG,CAAC,SAAS,EAAE,CAAC;AAChB,QAAA,GAAG,CAAC,SAAS,GAAG,EAAE,CAAC;AACnB,QAAA,GAAG,CAAC,GAAG,CACH,WAAW,CAAC,CAAC,EACb,WAAW,CAAC,CAAC,EACb,EAAE,EACF,IAAI,CAAC,YAAY,EACjB,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CACxC,CAAC;QACF,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,SAAS,EAAE,CAAC;AAEhB,QAAA,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE;AAClC,YAAA,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACzB,SAAA;KACJ;IAEM,IAAI,GAAA;QACP,IAAI,CAAC,IAAI,CAAC,MAAM;AACZ,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,MAAW;AAC3B,gBAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB,aAAC,CAAC;KACT;IAEM,gBAAgB,GAAA;AACnB,QAAA,OAAO,IAAI,CAAC;KACf;IAEM,gBAAgB,GAAA;AACnB,QAAA,OAAO,IAAI,CAAC;KACf;IAEM,iBAAiB,GAAA;QACpB,OAAO;KACV;AACJ;;ACtHD;;AAEG;MACmB,cAAc,CAAA;IAiBhC,WAAsB,CAAA,GAAa,EAAE,MAAc,EAAA;;QAXzC,IAAK,CAAA,KAAA,GAAW,EAAE,CAAC;;QAEnB,IAAgB,CAAA,gBAAA,GAAG,CAAC,CAAC;;QAGrB,IAAkB,CAAA,kBAAA,GAAG,CAAC,CAAC;;QAEvB,IAAe,CAAA,eAAA,GAAkB,EAAE,CAAC;;QAEpC,IAAc,CAAA,cAAA,GAAkB,EAAE,CAAC;AAGzC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AAEf,QAAA,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC;KACvD;AAOD;;AAEG;IACI,OAAO,GAAA;AACV,QAAA,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;KACnB;AAED;;AAEG;IACO,YAAY,GAAA;AAClB,QAAA,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAC1B,QAAA,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAEzB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,SAAA;QAED,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,+BAAkB,CAAC;YAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACnC,YAAA,KAAK,EAAE,CAAC;AACX,SAAA;AAED,QAAA,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC/C,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;AAAE,gBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAChE,iBAAA;gBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,+BAAkB,CAAC;AAC9C,aAAA;AACJ,SAAA;KACJ;AAED;;AAEG;IACO,SAAS,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,KAA0B,WAAA;cACvD,IAAI,CAAC,eAAe;AACtB,cAAE,IAAI,CAAC,cAAc,CAAC;KAC7B;AAED;;;;AAIG;AACI,IAAA,oBAAoB,CAAC,OAAe,EAAA;AACvC,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAEhC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE;AAClC,YAAA,IAAI,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAAE,gBAAA,OAAO,CAAC,CAAC;AAEvE,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;AAEG;IACI,YAAY,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAC5B;AAED;;AAEG;IACI,QAAQ,GAAA;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAED;;;;AAIG;AACI,IAAA,OAAO,CAAC,SAAiB,EAAA;QAC5B,IAAI,SAAS,IAAI,CAAC,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;AACjD,YAAA,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAChC,SAAA;AAED,QAAA,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;KAC1C;AAED;;;;AAIG;AACI,IAAA,MAAM,CAAC,OAAa,EAAA;QACvB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAE5D,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;AAIG;AACI,IAAA,MAAM,CAAC,OAAa,EAAA;QACvB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,GAAG,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAExC,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;AAIG;AACI,IAAA,eAAe,CAAC,SAAwB,EAAA;AAC3C,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC;AAExC,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,4CAA2B;AACvD,YAAA,OAAO,SAAS,KAA0B,CAAA;kBACpC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE;kBACtC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;AACjC,SAAA;AAAM,aAAA;YACH,MAAM,MAAM,GACR,SAAS,KAA0B,CAAA;kBAC7B,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC;kBAC7B,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;AAExC,YAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAEtD,YAAA,OAAO,SAAS,KAA0B,CAAA;kBACpC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;kBACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,SAAA;KACJ;AAED;;;;AAIG;AACI,IAAA,aAAa,CAAC,SAAwB,EAAA;AACzC,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC;AAExC,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,4CAA2B;AACvD,YAAA,OAAO,SAAS,KAA0B,CAAA;kBACpC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;kBACvB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;AACjC,SAAA;AAAM,aAAA;YACH,MAAM,MAAM,GACR,SAAS,KAA0B,CAAA;kBAC7B,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC;kBAC7B,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;AAExC,YAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAEtD,YAAA,OAAO,SAAS,KAA0B,CAAA;kBACpC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;kBACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,SAAA;KACJ;AAED;;AAEG;IACI,QAAQ,GAAA;QACX,IAAI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE;YACnD,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,UAAU,EAAE,CAAC;AACrB,SAAA;KACJ;AAED;;AAEG;IACI,QAAQ,GAAA;AACX,QAAA,IAAI,IAAI,CAAC,kBAAkB,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,UAAU,EAAE,CAAC;AACrB,SAAA;KACJ;AAED;;AAEG;IACI,mBAAmB,GAAA;QACtB,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAChC;AAED;;;AAGG;IACI,IAAI,CAAC,UAAkB,IAAI,EAAA;QAC9B,IAAI,OAAO,KAAK,IAAI;AAAE,YAAA,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAEtD,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;YAAE,OAAO;QAExD,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,WAAW,KAAK,IAAI,EAAE;AACtB,YAAA,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC;YACtC,IAAI,CAAC,UAAU,EAAE,CAAC;AACrB,SAAA;KACJ;AAED;;AAEG;IACI,qBAAqB,GAAA;QACxB,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAClC;AAED;;;;AAIG;AACI,IAAA,qBAAqB,CAAC,QAAgB,EAAA;AACzC,QAAA,IAAI,QAAQ,IAAI,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE;AACrD,YAAA,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;AACtC,SAAA;AAAM,aAAA;AACH,YAAA,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;AACnC,SAAA;KACJ;AAED;;AAEG;IACK,UAAU,GAAA;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAEzD,QAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,YAAA,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,YAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,8CAA4B;AACxD,gBAAA,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACrC,oBAAA,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,oBAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAClC,iBAAA;AAAM,qBAAA;AACH,oBAAA,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC9B,oBAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,iBAAA;AACJ,aAAA;AAAM,iBAAA;AACH,gBAAA,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC9B,gBAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,aAAA;AACJ,SAAA;AAED,QAAA,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACnD;AACJ;;AC9RD;;AAEG;AACG,MAAO,mBAAoB,SAAQ,cAAc,CAAA;AAGnD,IAAA,WAAA,CAAY,GAAa,EAAE,MAAc,EAAE,UAAoB,EAAA;AAC3D,QAAA,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAEnB,QAAA,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;IAEM,IAAI,GAAA;AACP,QAAA,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YAChC,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAA,MAAA,wBAAmB,CAAC;YAEhE,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,YAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzB,SAAA;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;AACJ;;AC1BD;;AAEG;MACU,MAAM,CAAA;AACf;;;;;AAKG;AACI,IAAA,OAAO,0BAA0B,CAAC,MAAa,EAAE,MAAa,EAAA;AACjE,QAAA,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,EAAE;AACpC,YAAA,OAAO,QAAQ,CAAC;AACnB,SAAA;AAED,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACzF;AAED;;;;AAIG;IACI,OAAO,gBAAgB,CAAC,OAAgB,EAAA;AAC3C,QAAA,OAAO,MAAM,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KACpE;AAED;;;;;AAKG;AACI,IAAA,OAAO,sBAAsB,CAAC,KAAc,EAAE,KAAc,EAAA;AAC/D,QAAA,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,QAAA,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEnC,QAAA,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,QAAA,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEnC,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KACzG;AAED;;;;;;;AAOG;AACI,IAAA,OAAO,WAAW,CAAC,IAAU,EAAE,GAAU,EAAA;QAC5C,IAAI,GAAG,KAAK,IAAI,EAAE;AACd,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAED,QAAA,IACI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI;YAClB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI;AAC/B,YAAA,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG;YACjB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EACjC;AACE,YAAA,OAAO,GAAG,CAAC;AACd,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;;;;;AAQG;AACI,IAAA,OAAO,eAAe,CAAC,gBAAuB,EAAE,UAAiB,EAAE,KAAa,EAAA;QACnF,OAAO;YACH,CAAC,EAAE,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC;YAC7F,CAAC,EAAE,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC;SAChG,CAAC;KACL;AAED;;;;;;;;;AASG;AACI,IAAA,OAAO,kBAAkB,CAAC,UAAiB,EAAE,MAAc,EAAE,YAAmB,EAAA;;QAEnF,IAAI,MAAM,CAAC,0BAA0B,CAAC,UAAU,EAAE,YAAY,CAAC,IAAI,MAAM,EAAE;AACvE,YAAA,OAAO,YAAY,CAAC;AACvB,SAAA;AAED,QAAA,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;AACvB,QAAA,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;AACvB,QAAA,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;AACzB,QAAA,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;;QAGzB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC9G,QAAA,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,EAAE;YACpB,CAAC,IAAI,CAAC,CAAC,CAAC;AACX,SAAA;QAED,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC1C,QAAA,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACjB,CAAC,GAAG,MAAM,CAAC;AACd,SAAA;AAED,QAAA,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;KACnB;AAED;;;;;;;;AAQG;AACI,IAAA,OAAO,6BAA6B,CAAC,UAAgB,EAAE,GAAY,EAAE,GAAY,EAAA;AACpF,QAAA,OAAO,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,0BAA0B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;KACtF;AAED;;;;;;;;AAQG;AACI,IAAA,OAAO,0BAA0B,CAAC,GAAY,EAAE,GAAY,EAAA;AAC/D,QAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,QAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE/B,QAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,QAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE/B,QAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,QAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAErD,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QAC/B,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QAE/B,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAEvD,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;AAC5B,YAAA,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACnB,SAAA;AAAM,aAAA;YACH,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACxE,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;;;;AAOG;AACI,IAAA,OAAO,oBAAoB,CAAC,QAAe,EAAE,QAAe,EAAA;AAC/D,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAChD,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEhD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAE1C,QAAA,MAAM,MAAM,GAAY,CAAC,QAAQ,CAAC,CAAC;QAEnC,SAAS,OAAO,CAAC,EAAU,EAAE,EAAU,EAAE,IAAY,EAAE,MAAc,EAAE,KAAa,EAAA;YAChF,IAAI,EAAE,GAAG,EAAE,EAAE;gBACT,OAAO,EAAE,GAAG,KAAK,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC;AACvC,aAAA;iBAAM,IAAI,EAAE,GAAG,EAAE,EAAE;gBAChB,OAAO,EAAE,GAAG,KAAK,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC;AACvC,aAAA;AAED,YAAA,OAAO,EAAE,CAAC;SACb;AAED,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC;AACR,gBAAA,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;AACxD,gBAAA,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;AAC3D,aAAA,CAAC,CAAC;AACN,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB;AACJ;;ACpMD;;AAEG;AACG,MAAO,QAAS,SAAQ,IAAI,CAAA;AAQ9B,IAAA,WAAA,CAAY,MAAc,EAAE,OAAoB,EAAE,OAAoB,EAAA;AAClE,QAAA,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAPnB,IAAa,CAAA,aAAA,GAAgB,IAAI,CAAC;QAElC,IAAa,CAAA,aAAA,GAAS,IAAI,CAAC;QAE3B,IAAM,CAAA,MAAA,GAAG,KAAK,CAAC;AAKnB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;KAC9C;IAEM,gBAAgB,GAAA;AACnB,QAAA,IAAI,IAAI,CAAC,iBAAiB,KAAA,MAAA,yBAAuB;AAC7C,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAED,QAAA,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;YAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAgB,CAAC;YACjE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAE3D,YAAA,IAAI,CAAC,aAAa,GAAG,IAAI,QAAQ,CAC7B,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,iBAAiB,CACzB,CAAC;AACL,SAAA;AAED,QAAA,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAClC;IAEM,gBAAgB,GAAA;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;IAEM,iBAAiB,GAAA;AACpB,QAAA,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;AAC7B,YAAA,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;AAC5B,YAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC1B,YAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC7B,SAAA;KACJ;AAEM,IAAA,IAAI,CAAC,WAAyB,EAAA;AACjC,QAAA,MAAM,OAAO,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAEnE,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACjE,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC;QAClD,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;QAEhD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAE1C,QAAA,MAAM,WAAW,GAAG,CAAA;;AAEL,qBAAA,EAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAA;;;qBAG3B,SAAS,CAAA;sBACR,UAAU,CAAA;SACvB,CAAC;AAEF,QAAA,OAAO,KAAqB,MAAA;AACxB,cAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;cAC1B,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;KAC7C;IAEO,QAAQ,CAAC,WAAW,GAAG,EAAE,EAAA;QAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC;AAEzE,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;QAE1C,MAAM,QAAQ,GACV,WAAW;AACX,YAAA,CAAA;;;;;AAKC,YAAA,CAAA;aACA,IAAI,CAAC,WAAW,KAAyB,CAAA;kBACpC,qBAAqB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAA;AACT,2DAAA,EAAA,KAAK,CAAO,KAAA,CAAA;AACzD,kBAAE,CAAA;AAC0B,0CAAA,EAAA,GAAG,CAAqB,kBAAA,EAAA,KAAK,CAAO,KAAA,CAAA,CAAC,CAAC;QAE1E,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;KACzC;AAEO,IAAA,QAAQ,CAAC,QAAe,EAAE,WAAW,GAAG,EAAE,EAAA;QAC9C,IAAI,OAAO,GAAG,WAAW,CAAC;QAC1B,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YAC7B,IAAI,CAAC,KAAK,IAAI,EAAE;gBACZ,IAAI,CAAC,GACD,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,KAAuB,CAAA;AAC7C,sBAAE;AACI,wBAAA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAC/B,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACjC,qBAAA;AACH,sBAAE;wBACI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAC9B,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;qBACjC,CAAC;gBAEZ,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAChE,gBAAA,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;AACzC,aAAA;AACJ,SAAA;QACD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,OAAO,IAAI,GAAG,CAAC;QAEf,MAAM,QAAQ,GACV,WAAW;YACX,CAAqC,kCAAA,EAAA,OAAO,CAAwB,qBAAA,EAAA,OAAO,CAAG,CAAA,CAAA;AAC9E,aAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;kBAC3C,wBAAwB,QAAQ,CAAC,CAAC,CAAO,IAAA,EAAA,QAAQ,CAAC,CAAC,CAAM,IAAA,CAAA;AAC3D,kBAAE,CAA0B,uBAAA,EAAA,QAAQ,CAAC,CAAC,OAAO,QAAQ,CAAC,CAAC,CAAA,cAAA,EAAiB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAA,KAAA,CAAO,CAAC,CAAC;QAEzG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;KACzC;AAEM,IAAA,UAAU,CAAC,MAAuB,EAAA;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;AAEnC,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACjC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,MAAM,CAAC,GAAG,MAAM,KAAA,CAAA,+BAA6B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;AAEpF,QAAA,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;QAEnB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACvC,QAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,CAAA;;;sBAGf,UAAU,CAAA;oBACZ,CAAC,CAAA;mBACF,CAAC,CAAA;qBACC,SAAS,CAAA;uBACP,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,CAAA,CAAA,CAAG,CAAC;KAC/D;IAEM,UAAU,GAAA;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAEM,IAAI,GAAA;AACP,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACtB;AAEM,IAAA,cAAc,CAAC,WAA4B,EAAA;AAC9C,QAAA,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAClC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAEnD,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,KAAA,CAAA,+BAA6B,SAAS,GAAG,QAAQ,CAAC,CAAC;KAC5F;AAEM,IAAA,iBAAiB,CAAC,OAAoB,EAAA;QACzC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;AAE3C,QAAA,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;KACpC;AACJ;;ACzKD;;AAEG;AACG,MAAO,kBAAmB,SAAQ,cAAc,CAAA;AAIlD,IAAA,WAAA,CACI,GAAa,EACb,MAAc,EACd,OAAoB,EACpB,KAA8C,EAAA;AAE9C,QAAA,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAEnB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;KAC7B;IAEM,IAAI,GAAA;;AAEP,QAAA,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YACzC,MAAM,IAAI,GAAG,IAAI,QAAQ,CACrB,IAAI,CAAC,MAAM,EACX,WAAW,EACX,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM,GAAoB,MAAA,0BAAkB,MAAA,wBAClF,CAAC;YAEF,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,YAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzB,SAAA;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;AACJ;;ACpCD;;AAEG;MACU,eAAe,CAAA;AAgBxB;;;;;;;AAOG;AACH,IAAA,WAAA,CACY,SAAwB,EACxB,MAAkB,EAE1B,SAAiB,EACjB,UAAkB,EAAA;QAJV,IAAS,CAAA,SAAA,GAAT,SAAS,CAAe;QACxB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAY;;AAjBtB,QAAA,IAAA,CAAA,iBAAiB,GAAU,IAAI,CAAC;AAChC,QAAA,IAAA,CAAA,kBAAkB,GAAU,IAAI,CAAC;AACjC,QAAA,IAAA,CAAA,oBAAoB,GAAU,IAAI,CAAC;QAoBvC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;KAC9C;AAED;;;;;;AAMG;AACI,IAAA,IAAI,CAAC,QAAe,EAAA;QACvB,IAAI;;YAEA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;;AAEpD,YAAA,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAE5C,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;AACR,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;KACJ;AAED;;;;AAIG;IACI,mBAAmB,GAAA;QACtB,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC/B,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAEpC,QAAA,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI,EAAE;YAClC,UAAU,GAAG,IAAI,CAAC;AACrB,SAAA;AAAM,aAAA;AACH,YAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAErC,YAAA,IAAI,IAAI,CAAC,oBAAoB,KAAK,IAAI;gBAAE,UAAU,GAAG,KAAK,CAAC;AAC9D,SAAA;AAED,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AAEvC,QAAA,IAAI,UAAU,IAAI,IAAI,CAAC,MAAM,uCAAwB;YACjD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACrC,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB;AAED;;;;AAIG;IACI,iBAAiB,GAAA;QACpB,MAAM,MAAM,GAAG,EAAE,CAAC;AAElB,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAEpC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAA,KAAA,uBAAqB;AAChC,YAAA,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;AACjC,gBAAA,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC5C,aAAA;AACD,YAAA,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;AAC1D,SAAA;AAED,QAAA,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI,EAAE;AAClC,YAAA,IACI,MAAM,CAAC,0BAA0B,CAC7B,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,iBAAiB,CACzB,IAAI,EAAE;AAEP,gBAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,IAAI,CAAC,MAAM,KAAA,KAAA,uBAAqB;AAChC,gBAAA,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;AAC1D,aAAA;AACJ,SAAA;AAED,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACvC,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAEpC,QAAA,OAAO,MAAM,CAAC;KACjB;AAED;;AAEG;IACI,QAAQ,GAAA;AACX,QAAA,IAAI,IAAI,CAAC,SAAS,KAAA,CAAA,8BAA4B;AAC1C,YAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;AACtB,SAAA;QAED,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAED;;AAEG;IACI,OAAO,GAAA;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;AAED;;AAEG;IACI,WAAW,GAAA;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;AAED;;AAEG;IACI,eAAe,GAAA;AAClB,QAAA,IAAI,IAAI,CAAC,SAAS,KAAA,CAAA,8BAA4B;AAC1C,YAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAC5B,SAAA;AAED,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;KAC7B;AAED;;AAEG;IACI,YAAY,GAAA;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;AAED;;AAEG;IACI,mBAAmB,GAAA;AACtB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;KACtF;AAED;;AAEG;IACI,SAAS,GAAA;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;AAED;;AAEG;IACI,qBAAqB,GAAA;AACxB,QAAA,IAAI,IAAI,CAAC,SAAS,KAAA,CAAA,2BAAyB;YACvC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtC,SAAA;QAED,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;KACzB;AAED;;AAEG;IACI,mBAAmB,GAAA;AACtB,QAAA,IAAI,IAAI,CAAC,MAAM,KAAA,KAAA,uBAAqB;YAChC,OAAO,IAAI,CAAC,iBAAiB,CAAC;AACjC,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI;gBAAE,OAAO,IAAI,CAAC,kBAAkB,CAAC;YAErE,OAAO,IAAI,CAAC,iBAAiB,CAAC;AACjC,SAAA;KACJ;AAED;;AAEG;IACI,cAAc,GAAA;QACjB,MAAM,KAAK,GAAG,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE;AACvE,YAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACd,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;AAC9B,SAAA,CAAC,CAAC;AAEH,QAAA,IAAI,IAAI,CAAC,SAAS,KAAA,CAAA,8BAA4B;AAC1C,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;AAED,QAAA,OAAO,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC;KAC1B;AAEO,IAAA,oBAAoB,CAAC,GAAU,EAAA;QACnC,IAAI,MAAM,GAAG,GAAG,CAAC;AAEjB,QAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AAEpC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAA,KAAA,uBAAqB;AAChC,YAAA,MAAM,GAAG,IAAI,CAAC,yBAAyB,CACnC,MAAM,EACN,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EACd,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,CAC/B,CAAC;AACL,SAAA;AAAM,aAAA;AACH,YAAA,MAAM,GAAG,IAAI,CAAC,yBAAyB,CACnC,MAAM,EACN,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,EAC5B,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CACjB,CAAC;AACL,SAAA;QAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;AACnE,YAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;AACzC,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB;AAEO,IAAA,sBAAsB,CAAC,GAAU,EAAA;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;KACrC;AAEO,IAAA,cAAc,CAAC,GAAU,EAAA;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,KAAsB,QAAA,2BAAG,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAEhF,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;QAErE,IAAI,GAAG,GAAG,CAAC;YAAE,KAAK,GAAG,CAAC,KAAK,CAAC;AAE5B,QAAA,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC;AAC3B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC;AAC3C,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAEhD,IAAI,IAAI,CAAC,MAAM,KAAsB,QAAA;YAAE,KAAK,GAAG,CAAC,KAAK,CAAC;AAEtD,QAAA,OAAO,KAAK,CAAC;KAChB;AAGO,IAAA,WAAW,CAAC,QAAe,EAAA;AAC/B,QAAA,IAAI,IAAI,CAAC,MAAM,KAAA,KAAA,uBAAqB;YAChC,OAAO,IAAI,CAAC,oBAAoB,CAC5B;AACI,gBAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;gBACd,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;gBAC3B,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;gBAC5B,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;aAC5C,EACD,QAAQ,CACX,CAAC;AACL,SAAA;QAED,OAAO,IAAI,CAAC,oBAAoB,CAC5B;YACI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE;AAC7B,YAAA,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE;AAC1C,YAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACd,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;SAC9B,EACD,QAAQ,CACX,CAAC;KACL;IAEO,oBAAoB,CAAC,MAAe,EAAE,QAAe,EAAA;QACzD,OAAO;YACH,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;YAClD,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;YACnD,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;YACrD,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;SACzD,CAAC;KACL;IAEO,eAAe,CAAC,gBAAuB,EAAE,UAAiB,EAAA;QAC9D,OAAO;AACH,YAAA,CAAC,EACG,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;gBACzC,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;AACzC,gBAAA,UAAU,CAAC,CAAC;AAChB,YAAA,CAAC,EACG,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;gBACzC,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;AACzC,gBAAA,UAAU,CAAC,CAAC;SACnB,CAAC;KACL;AAEO,IAAA,uBAAuB,CAAC,GAAU,EAAA;AACtC,QAAA,MAAM,SAAS,GAAS;YACpB,IAAI,EAAE,CAAC,CAAC;YACR,GAAG,EAAE,CAAC,CAAC;AACP,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC;AACzB,YAAA,MAAM,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC;SAC9B,CAAC;AAEF,QAAA,IAAI,IAAI,CAAC,MAAM,KAAA,KAAA,uBAAqB;AAChC,YAAA,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,6BAA6B,CACzD,SAAS,EACT,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EACzB;AACI,gBAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;gBACd,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;AAC9B,aAAA,CACJ,CAAC;AAEF,YAAA,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,6BAA6B,CAC1D,SAAS,EACT,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAC3B;gBACI,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;gBAC3B,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;AAC5C,aAAA,CACJ,CAAC;YAEF,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,6BAA6B,CAC5D,SAAS,EACT,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAC7C;gBACI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;gBAC5B,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;AAC5C,aAAA,CACJ,CAAC;AACL,SAAA;AAAM,aAAA;YACH,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,6BAA6B,CACzD,SAAS,EACT,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EACvC;AACI,gBAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;gBACd,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;AAC9B,aAAA,CACJ,CAAC;AAEF,YAAA,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,6BAA6B,CAC1D,SAAS,EACT,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EACxB;gBACI,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;gBAC3B,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;AAC5C,aAAA,CACJ,CAAC;YAEF,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,6BAA6B,CAC5D,SAAS,EACT,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAC7C;gBACI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;gBAC5B,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE;AAC5C,aAAA,CACJ,CAAC;AACL,SAAA;KACJ;AAEO,IAAA,yBAAyB,CAC7B,UAAiB,EACjB,SAAgB,EAChB,SAAgB,EAAA;QAEhB,IAAI,MAAM,GAAG,UAAU,CAAC;AAExB,QAAA,MAAM,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACzE,IAAI,MAAM,KAAK,GAAG,EAAE;YAChB,MAAM,GAAG,GAAG,CAAC;AACb,YAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACvC,SAAA;AAED,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;AAElF,QAAA,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;AAC1C,QAAA,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAEtC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAA,QAAA,0BAAwB;AACnC,YAAA,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AACnC,YAAA,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;AACxC,SAAA;AAED,QAAA,IAAI,aAAa,CAAC,CAAC,IAAI,CAAC,EAAE;AACtB,YAAA,MAAM,WAAW,GAAG,MAAM,CAAC,kBAAkB,CAAC,SAAS,EAAE,GAAG,EAAE,aAAa,CAAC,CAAC;YAE7E,IAAI,WAAW,KAAK,MAAM,EAAE;gBACxB,MAAM,GAAG,WAAW,CAAC;AACrB,gBAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACvC,aAAA;AACJ,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB;IAEO,sBAAsB,GAAA;AAC1B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAEzC,QAAA,MAAM,MAAM,GACR,KAAK,KAAK,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI;cAC/D,IAAI,CAAC,kBAAkB;AACzB,cAAE,IAAI,CAAC,oBAAoB,CAAC;AAEpC,QAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KAC1B;AACJ;;ACxYD;;AAEG;MACU,IAAI,CAAA;IAWb,WAAY,CAAA,MAAc,EAAE,GAAa,EAAA;QAPjC,IAAY,CAAA,YAAA,GAAS,IAAI,CAAC;QAC1B,IAAU,CAAA,UAAA,GAAS,IAAI,CAAC;QAExB,IAAI,CAAA,IAAA,GAAoB,IAAI,CAAC;AAE7B,QAAA,IAAA,CAAA,KAAK,GAAqC,MAAA,0BAAA;AAG9C,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;KAClB;AAED;;;;AAIG;AACI,IAAA,IAAI,CAAC,SAAgB,EAAA;QACxB,IAAI,CAAC,QAAQ,CAAA,WAAA,+BAAyB,CAAC;;AAGvC,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;AAAE,YAAA,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAE9C,QAAA,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;KACjD;AAED;;;;AAIG;AACI,IAAA,IAAI,CAAC,SAAgB,EAAA;;AAExB,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;AAAE,YAAA,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;AAEtD,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;YAAE,OAAO;AAEnC,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAElC,IAAI,CAAC,QAAQ,CAAA,UAAA,8BAAwB,CAAC;;AAGtC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;QAGpC,MAAM,MAAM,GACR,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAsB,QAAA,2BAAG,IAAI,CAAC,MAAM,GAAG,UAAU,GAAG,UAAU,CAAC;AAExF,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAA,QAAA,2BAAyB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;AAG5E,QAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,GAAG,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;;AAG9D,QAAA,IAAI,CAAC,iBAAiB,CAClB,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,GAAG,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,EAC7C,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,EAChC,IAAI,CACP,CAAC;KACL;AAED;;;;;;AAMG;AACI,IAAA,KAAK,CAAC,SAAgB,EAAA;QACzB,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACrD,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;;QAGlC,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;;AAGpD,QAAA,MAAM,UAAU,GAAG,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,GAAqB,QAAA,sDAAiB;AAErF,QAAA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;AAAE,YAAA,OAAO,KAAK,CAAC;QAElD,IAAI;AACA,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AAC5E,YAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;;AAGxE,YAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,8CAA4B;gBACxD,IAAI,SAAS,iCAAyB;AAClC,oBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBAExE,IAAI,QAAQ,KAAK,IAAI,EAAE;wBACnB,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,QAAQ,CAAC,UAAU,EAAE,EAAE;AAC1D,4BAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,+BAAkB,CAAC;4BACtD,QAAQ,CAAC,iBAAiB,CAAA,MAAA,wBAAkB,CAAC;AAChD,yBAAA;AACJ,qBAAA;AACJ,iBAAA;AAAM,qBAAA;AACH,oBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBAExE,IAAI,QAAQ,KAAK,IAAI,EAAE;wBACnB,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,QAAQ,CAAC,UAAU,EAAE,EAAE;AAC1D,4BAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,+BAAkB,CAAC;4BACtD,QAAQ,CAAC,iBAAiB,CAAA,MAAA,wBAAkB,CAAC;AAChD,yBAAA;AACJ,qBAAA;AACJ,iBAAA;AACJ,aAAA;AAED,YAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACpC,YAAA,IAAI,CAAC,IAAI,GAAG,IAAI,eAAe,CAC3B,SAAS,EACT,UAAU,EACV,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC3B,CAAC;AAEF,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;AACR,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;KACJ;AAED;;;;AAIG;AACK,IAAA,EAAE,CAAC,OAAc,EAAA;AACrB,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;AAAE,YAAA,OAAO;QAE/B,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAEjD,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;AACvD,YAAA,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;AAC/D,YAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC5B,YAAA,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAEhC,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;AAC3D,YAAA,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;AAC3D,YAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAEjD,YAAA,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,oCAA4B;AACpD,gBAAA,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG,QAAQ,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;AACrE,aAAA;AAAM,iBAAA;gBACH,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG,QAAQ,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;AACtE,aAAA;AAED,YAAA,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAE7C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3C,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAE/C,YAAA,IAAI,CAAC,MAAM,CAAC,aAAa,CACrB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAC/B,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAC1B,QAAQ,EACR,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAC3B,CAAC;AACL,SAAA;KACJ;AAED;;;;;AAKG;IACI,UAAU,CAAC,IAAY,EAAE,MAAkB,EAAA;QAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,qBAAqB,EAAE,CAAC;AACrE,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAErE,IAAI;YACA,IAAI,IAAI,GAAG,OAAO,EAAE;AAChB,gBAAA,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,qBAAqB,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;AAC7D,gBAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzB,aAAA;YACD,IAAI,IAAI,GAAG,OAAO,EAAE;AAChB,gBAAA,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,qBAAqB,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;AAC7D,gBAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzB,aAAA;AACJ,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;;AAEX,SAAA;KACJ;AAED;;;;AAIG;AACI,IAAA,QAAQ,CAAC,MAAkB,EAAA;QAC9B,IAAI,CAAC,IAAI,CAAC;AACN,YAAA,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,GAAG,CAAC;AACnE,YAAA,CAAC,EAAE,MAAM,KAAA,KAAA,wBAAsB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC;AACtE,SAAA,CAAC,CAAC;KACN;AAED;;;;AAIG;AACI,IAAA,QAAQ,CAAC,MAAkB,EAAA;QAC9B,IAAI,CAAC,IAAI,CAAC;AACN,YAAA,CAAC,EAAE,EAAE;AACL,YAAA,CAAC,EAAE,MAAM,KAAA,KAAA,wBAAsB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC;AACtE,SAAA,CAAC,CAAC;KACN;AAED;;AAEG;IACI,QAAQ,GAAA;AACX,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;YAAE,OAAO;QAE/B,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;AACpC,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAElC,QAAA,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAA,QAAA,2BAAyB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAExE,QAAA,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;AAAE,YAAA,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;;AACxE,YAAA,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;KACrE;AAED;;;;;AAKG;AACI,IAAA,UAAU,CAAC,SAAgB,EAAA;AAC9B,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAA+C,MAAA,2BAAA,aAAA,iCAAA;YAAE,OAAO;AAE5E,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAClC,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;;AAGjC,QAAA,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAE3F,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAErD,QAAA,IACI,OAAO,CAAC,CAAC,GAAG,CAAC;YACb,OAAO,CAAC,CAAC,GAAG,CAAC;AACb,YAAA,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK;AACtB,YAAA,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM;AACvB,aAAC,OAAO,CAAC,CAAC,GAAG,iBAAiB,IAAI,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;AAC7E,aAAC,OAAO,CAAC,CAAC,GAAG,iBAAiB,IAAI,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,iBAAiB,CAAC,EAChF;AACE,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;AACpB,gBAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;oBAAE,OAAO;gBAEnC,IAAI,CAAC,QAAQ,CAAA,aAAA,iCAA2B,CAAC;AAEzC,gBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAE3C,MAAM,eAAe,GAAG,EAAE,CAAC;gBAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAsB,QAAA,2BAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;gBAEjF,MAAM,KAAK,GACP,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAsB,QAAA;AACvC,sBAAE,IAAI,CAAC,MAAM,GAAG,eAAe;sBAC7B,eAAe,CAAC;AAE1B,gBAAA,IAAI,CAAC,iBAAiB,CAClB,EAAE,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,EAC/B,EAAE,CAAC,EAAE,SAAS,GAAG,eAAe,EAAE,CAAC,EAAE,KAAK,EAAE,EAC5C,KAAK,EACL,KAAK,CACR,CAAC;AACL,aAAA;AAAM,iBAAA;AACH,gBAAA,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;AACjD,aAAA;AACJ,SAAA;AAAM,aAAA;YACH,IAAI,CAAC,QAAQ,CAAA,MAAA,0BAAoB,CAAC;AAClC,YAAA,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;YAE9B,IAAI,CAAC,QAAQ,EAAE,CAAC;AACnB,SAAA;KACJ;AAED;;;;;;;AAOG;IACK,iBAAiB,CACrB,KAAY,EACZ,IAAW,EACX,QAAiB,EACjB,SAAS,GAAG,IAAI,EAAA;QAEhB,MAAM,MAAM,GAAG,MAAM,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;;QAGxD,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAK,MAAM,CAAC,IAAI,MAAM;AAAE,YAAA,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtD,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAE1D,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAK;;YAE9C,IAAI,CAAC,IAAI,CAAC,IAAI;gBAAE,OAAO;AAEvB,YAAA,IAAI,QAAQ,EAAE;AACV,gBAAA,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,KAAuB,CAAA;AAAE,oBAAA,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;;AAC1E,oBAAA,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;AAClC,aAAA;AAED,YAAA,IAAI,SAAS,EAAE;AACX,gBAAA,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAChC,gBAAA,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAClC,gBAAA,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;gBAE1B,IAAI,CAAC,QAAQ,CAAA,MAAA,0BAAoB,CAAC;gBAClC,IAAI,CAAC,KAAK,EAAE,CAAC;AAChB,aAAA;AACL,SAAC,CAAC,CAAC;KACN;AAED;;AAEG;IACI,cAAc,GAAA;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;AAED;;AAEG;IACI,QAAQ,GAAA;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAEO,IAAA,QAAQ,CAAC,QAAuB,EAAA;AACpC,QAAA,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;AACzB,YAAA,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC/B,YAAA,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;AACzB,SAAA;KACJ;AAEO,IAAA,mBAAmB,CAAC,QAAe,EAAA;AACvC,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAElC,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,4CAA2B;AACvD,YAAA,IAAI,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;gBAC/C,OAA0B,CAAA,0BAAA;AAC7B,aAAA;AACJ,SAAA;aAAM,IAAI,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;YACpC,OAA0B,CAAA,0BAAA;AAC7B,SAAA;QAED,OAA6B,CAAA,6BAAA;KAChC;AAEO,IAAA,oBAAoB,CAAC,IAAY,EAAA;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC;QAExD,IAAI,IAAI,IAAI,IAAI;AAAE,YAAA,OAAO,WAAW,CAAC;AAErC,QAAA,OAAO,CAAC,IAAI,GAAG,IAAI,IAAI,WAAW,CAAC;KACtC;AAEO,IAAA,cAAc,CAAC,SAAwB,EAAA;AAC3C,QAAA,IAAI,SAAS,KAA0B,CAAA;AACnC,YAAA,OAAO,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAExE,OAAO,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;KAC9C;IAEO,KAAK,GAAA;AACT,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KAC1B;IAEO,aAAa,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;KAChC;IAEO,UAAU,CAAC,GAAG,MAAuB,EAAA;AACzC,QAAA,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;AACxB,YAAA,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK;AAAE,gBAAA,OAAO,IAAI,CAAC;AACzC,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACnYD;;AAEG;MACmB,MAAM,CAAA;IAqCxB,WAAsB,CAAA,GAAa,EAAE,OAAoB,EAAA;;QAhC/C,IAAQ,CAAA,QAAA,GAAS,IAAI,CAAC;;QAEtB,IAAS,CAAA,SAAA,GAAS,IAAI,CAAC;;QAGvB,IAAY,CAAA,YAAA,GAAS,IAAI,CAAC;;QAE1B,IAAU,CAAA,UAAA,GAAS,IAAI,CAAC;;QAGxB,IAAS,CAAA,SAAA,GAAkB,IAAI,CAAC;;QAEhC,IAAW,CAAA,WAAA,GAAgB,IAAI,CAAC;;QAEhC,IAAM,CAAA,MAAA,GAAW,IAAI,CAAC;;QAEtB,IAAS,CAAA,SAAA,GAAqB,IAAI,CAAC;;QAEnC,IAAQ,CAAA,QAAA,GAAe,IAAI,CAAC;;QAE9B,IAAU,CAAA,UAAA,GAAa,IAAI,CAAC;;QAG1B,IAAK,CAAA,KAAA,GAAG,CAAC,CAAC;AAEpB;;;;AAIG;QACK,IAAM,CAAA,MAAA,GAAG,KAAK,CAAC;AAGnB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAA,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;AAGf,QAAA,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,8BAA8B,CAAC,CAAC;AACzD,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC;KACjE;AAOD;;;;AAIG;AACK,IAAA,MAAM,CAAC,KAAa,EAAA;AACxB,QAAA,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;;YAEzB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CACzB,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CACpE,CAAC;YAEF,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE;gBAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;AACvC,aAAA;AAAM,iBAAA;AACH,gBAAA,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;AAC9B,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACzB,aAAA;AACJ,SAAA;AAED,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,EAAE,CAAC;KACpB;AAED;;AAEG;IACI,KAAK,GAAA;QACR,IAAI,CAAC,MAAM,EAAE,CAAC;AAEd,QAAA,MAAM,IAAI,GAAG,CAAC,KAAa,KAAU;AACjC,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnB,qBAAqB,CAAC,IAAI,CAAC,CAAC;AAChC,SAAC,CAAC;QAEF,qBAAqB,CAAC,IAAI,CAAC,CAAC;KAC/B;AAED;;;;;;AAMG;AACI,IAAA,cAAc,CACjB,MAAqB,EACrB,QAAgB,EAChB,YAAoC,EAAA;AAEpC,QAAA,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,CAAC,SAAS,GAAG;YACb,MAAM;YACN,QAAQ;AACR,YAAA,aAAa,EAAE,QAAQ,GAAG,MAAM,CAAC,MAAM;YACvC,YAAY;YACZ,SAAS,EAAE,IAAI,CAAC,KAAK;SACxB,CAAC;KACL;AAED;;AAEG;IACI,eAAe,GAAA;AAClB,QAAA,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;AACzB,YAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;AAE1D,YAAA,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,KAAK,IAAI,EAAE;AACtC,gBAAA,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;AACjC,aAAA;AACJ,SAAA;AAED,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACzB;AAED;;AAEG;IACI,MAAM,GAAA;AACT,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAE/C,QAAA,IAAI,IAAI,CAAC,WAAW,KAAK,WAAW,EAAE;AAClC,YAAA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,YAAA,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;AAC3C,SAAA;KACJ;AAED;;AAEG;IACK,mBAAmB,GAAA;QACvB,IAAI,WAAW,2CAAyB;AAExC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AACxC,QAAA,MAAM,WAAW,GAAU;YACvB,CAAC,EAAE,UAAU,GAAG,CAAC;AACjB,YAAA,CAAC,EAAE,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC;SAC/B,CAAC;AAEF,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAEvD,QAAA,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;AACnC,QAAA,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAErC,QAAA,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC,GAAG,SAAS,CAAC;AAErC,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,uCAAuB;AACxC,YAAA,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,WAAW;AAC5E,gBAAA,WAAW,yCAAwB;YAEvC,SAAS;AACL,gBAAA,WAAW,KAAyB,UAAA;AAChC,sBAAE,IAAI,CAAC,aAAa,EAAE;AACtB,sBAAE,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;AAEnC,YAAA,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;AAAE,gBAAA,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;AAEzE,YAAA,UAAU,GAAG,SAAS,GAAG,KAAK,CAAC;AAC/B,YAAA,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE;AACpC,gBAAA,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACnC,gBAAA,SAAS,GAAG,UAAU,GAAG,KAAK,CAAC;AAClC,aAAA;YAED,IAAI;AACA,gBAAA,WAAW,KAAyB,UAAA;sBAC9B,WAAW,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,GAAG,SAAS;AAC3C,sBAAE,WAAW,CAAC,CAAC,GAAG,SAAS,CAAC;AACvC,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,UAAU,GAAG,SAAS,GAAG,CAAC,EAAE;gBAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,WAAW,EAAE;AACpC,oBAAA,WAAW,yCAAwB;oBACnC,IAAI,GAAG,WAAW,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC;AACpD,iBAAA;AACJ,aAAA;AACJ,SAAA;QAED,IAAI,CAAC,UAAU,GAAG;YACd,IAAI;AACJ,YAAA,GAAG,EAAE,WAAW,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;YACnC,KAAK,EAAE,SAAS,GAAG,CAAC;AACpB,YAAA,MAAM,EAAE,UAAU;AAClB,YAAA,SAAS,EAAE,SAAS;SACvB,CAAC;AAEF,QAAA,OAAO,WAAW,CAAC;KACtB;AAED;;;;;;;AAOG;AACI,IAAA,aAAa,CAChB,GAAU,EACV,KAAa,EACb,QAAgB,EAChB,SAAwB,EAAA;QAExB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,UAAU;YAAE,OAAO;QAE/C,MAAM,gBAAgB,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,gBAAgB,CAAC;QAEnE,IAAI,CAAC,MAAM,GAAG;YACV,GAAG;YACH,KAAK;YACL,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,QAAQ,IAAI,GAAG;AAC9D,YAAA,OAAO,EAAE,CAAC,CAAC,GAAG,GAAG,QAAQ,IAAI,gBAAgB,IAAI,GAAG,GAAG,GAAG;YAC1D,SAAS;YACT,QAAQ,EAAE,QAAQ,GAAG,CAAC;SACzB,CAAC;KACL;AAED;;AAEG;IACI,WAAW,GAAA;AACd,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACtB;AAED;;AAEG;IACI,aAAa,GAAA;QAChB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,cAAc,EAAE,CAAC,WAAW,CAAC;KACxD;AAED;;AAEG;IACI,cAAc,GAAA;QACjB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC;KACzD;AAED;;AAEG;IACI,YAAY,GAAA;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;AAED;;AAEG;IACI,OAAO,GAAA;AACV,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;YAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEzD,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;AAED;;AAEG;IACI,WAAW,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;KACjC;AAED;;AAEG;IACI,cAAc,GAAA;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;AAED;;;;AAIG;AACI,IAAA,WAAW,CAAC,QAAoB,EAAA;AACnC,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;AAED;;;;AAIG;AACI,IAAA,YAAY,CAAC,SAAwB,EAAA;AACxC,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;AAED;;;;AAIG;AACI,IAAA,YAAY,CAAC,IAAU,EAAA;QAC1B,IAAI,IAAI,KAAK,IAAI;YAAE,IAAI,CAAC,cAAc,CAAA,CAAA,6BAAuB,CAAC;AAE9D,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACzB;AAED;;;AAGG;AACI,IAAA,WAAW,CAAC,IAAU,EAAA;QACzB,IAAI,IAAI,KAAK,IAAI;YAAE,IAAI,CAAC,cAAc,CAAA,CAAA,4BAAsB,CAAC;AAE7D,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACxB;AAED;;;AAGG;AACI,IAAA,aAAa,CAAC,IAAU,EAAA;QAC3B,IAAI,IAAI,KAAK,IAAI;AACb,YAAA,IAAI,CAAC,cAAc,CACf,IAAI,CAAC,SAAS,KAAuB,CAAA,4BAAE,CAAA,8BAAuB,CAAA,6BACjE,CAAC;AAEN,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KAC1B;AAED;;;;AAIG;AACI,IAAA,eAAe,CAAC,IAAU,EAAA;QAC7B,IAAI,IAAI,KAAK,IAAI;AACb,YAAA,IAAI,CAAC,cAAc,CACf,IAAI,CAAC,SAAS,KAA0B,CAAA;gBACpC,IAAI,CAAC,WAAW,KAAyB,UAAA;kBACxC,CAAA;kBACA,CAAA,6BACR,CAAC;AAEN,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KAC5B;AAED;;;;;AAKG;AACI,IAAA,aAAa,CAAC,GAAU,EAAA;AAC3B,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE5B,OAAO;AACH,YAAA,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI;AACpB,YAAA,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG;SACtB,CAAC;KACL;IAEM,QAAQ,GAAA;QACX,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;AAED;;;;;;;AAOG;IACI,aAAa,CAAC,GAAU,EAAE,SAAyB,EAAA;AACtD,QAAA,IAAI,CAAC,SAAS;AAAE,YAAA,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAE3C,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC5B,MAAM,CAAC,GACH,SAAS,KAA0B,CAAA;AAC/B,cAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC;AACpC,cAAE,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7C,OAAO;YACH,CAAC;AACD,YAAA,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG;SACtB,CAAC;KACL;AAED;;;;;;;AAOG;IACI,eAAe,CAAC,GAAU,EAAE,SAAyB,EAAA;AACxD,QAAA,IAAI,CAAC,SAAS;AAAE,YAAA,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAE3C,IAAI,GAAG,IAAI,IAAI;AAAE,YAAA,OAAO,IAAI,CAAC;AAE7B,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE5B,MAAM,CAAC,GACH,SAAS,KAA0B,CAAA;AAC/B,cAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC;AACpC,cAAE,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7C,OAAO;YACH,CAAC;AACD,YAAA,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG;SACtB,CAAC;KACL;AAED;;;;;;;AAOG;IACI,mBAAmB,CAAC,IAAgB,EAAE,SAAyB,EAAA;AAClE,QAAA,IAAI,CAAC,SAAS;AAAE,YAAA,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAE3C,OAAO;YACH,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YACtD,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC;YACxD,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC;YAC5D,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC;SACjE,CAAC;KACL;AACJ;;ACneD;;AAEG;AACG,MAAO,YAAa,SAAQ,MAAM,CAAA;AAIpC,IAAA,WAAA,CAAY,GAAa,EAAE,OAAoB,EAAE,QAA2B,EAAA;AACxE,QAAA,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAEpB,QAAA,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACxC;IAEM,UAAU,GAAA;QACb,OAAO,IAAI,CAAC,GAAG,CAAC;KACnB;IAES,SAAS,GAAA;QACf,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,IAAI,IAAI,CAAC,WAAW,KAAyB,UAAA;AACzC,YAAA,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI;AAAE,gBAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,8BAAsB,CAAC;AAE9E,QAAA,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI;AAAE,YAAA,IAAI,CAAC,SAAS,CAAC,UAAU,+BAAuB,CAAC;AAE7E,QAAA,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QAEpD,IAAI,CAAC,cAAc,EAAE,CAAC;AAEtB,QAAA,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI;AAAE,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAExD,QAAA,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YACrB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,EAAE,CAAC;AAC1B,SAAA;AAED,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAE5B,QAAA,IAAI,IAAI,CAAC,WAAW,KAAA,UAAA,6BAA2B;AAC3C,YAAA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YACrB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7E,YAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AACnB,SAAA;KACJ;IAEO,cAAc,GAAA;AAClB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAE5B,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAChB,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;AAErB,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAE5D,MAAM,SAAS,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAC3E,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAE7C,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AAEzE,QAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;AAClD,QAAA,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;AACtD,QAAA,aAAa,CAAC,YAAY,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;AACvD,QAAA,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;AACtD,QAAA,aAAa,CAAC,YAAY,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;AACvD,QAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;AAElD,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAEhB,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC;AACnC,QAAA,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAErD,QAAA,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;KACtB;IAEO,eAAe,GAAA;AACnB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAE5B,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAChB,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;QAErB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAE5D,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACvF,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAE7C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAE3D,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAEhF,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,oCAA4B;YACjD,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AAC5B,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;AAC5E,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;AACrD,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;AAC7C,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;AAClD,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;AAC/E,SAAA;AAED,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAEhB,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAE5D,QAAA,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;KACtB;IAEO,eAAe,GAAA;AACnB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAE5B,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAChB,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;AAErB,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAEvF,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzD,QAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACxD,QAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1D,QAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAChE,QAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC9D,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAE7C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AAE3D,QAAA,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;AACxC,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAElE,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,oCAA4B;YACjD,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;AAE/B,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;AAC5E,YAAA,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;AACvD,YAAA,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;AAC9E,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;AACrD,SAAA;AAAM,aAAA;YACH,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AAE5B,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;AAC5E,YAAA,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;AACvD,YAAA,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;AAC9E,YAAA,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;AACrD,SAAA;AAED,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AAEhB,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC;AACnC,QAAA,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAE9C,QAAA,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;KACtB;IAEO,KAAK,GAAA;AACT,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAClE;AACJ;;ACvJD;;AAEG;MACmB,EAAE,CAAA;AAapB;;;;;;AAMG;AACH,IAAA,WAAA,CAAsB,OAAoB,EAAE,GAAa,EAAE,OAAoB,EAAA;QAfvE,IAAU,CAAA,UAAA,GAAc,IAAI,CAAC;QACpB,IAAY,CAAA,YAAA,GAAG,GAAG,CAAC;QAG5B,IAAQ,CAAA,QAAA,GAAG,MAAW;YAC1B,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,SAAC,CAAC;AAoJM,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,CAAa,KAAU;YAC1C,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;AAC5B,gBAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;AAEnD,gBAAA,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAE7B,CAAC,CAAC,cAAc,EAAE,CAAC;AACtB,aAAA;AACL,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,CAAa,KAAU;YAC3C,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;AAC5B,gBAAA,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAC9B,oBAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;oBAEnD,IAAI,CAAC,UAAU,GAAG;AACd,wBAAA,KAAK,EAAE,GAAG;AACV,wBAAA,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;qBACnB,CAAC;;oBAGF,UAAU,CAAC,MAAK;AACZ,wBAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;AAC1B,4BAAA,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AAChC,yBAAA;AACL,qBAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;oBAEtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,mBAAmB;wBAAE,CAAC,CAAC,cAAc,EAAE,CAAC;AACvE,iBAAA;AACJ,aAAA;AACL,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,SAAS,GAAG,CAAC,CAAa,KAAU;AACxC,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;AAEnD,YAAA,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC3B,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,CAAa,KAAU;AAC1C,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;YAEnD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAClC,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,CAAa,KAAU;AAC1C,YAAA,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAC9B,gBAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;gBAEnD,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,mBAAmB,EAAE;AAC5C,oBAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;AAC1B,wBAAA,IACI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;AAC9C,4BAAA,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,sCACrB;4BACE,IAAI,CAAC,CAAC,UAAU;gCAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAClD,yBAAA;AACJ,qBAAA;AAED,oBAAA,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,sCAAyB;wBAC5C,CAAC,CAAC,cAAc,EAAE,CAAC;AACtB,qBAAA;AACJ,iBAAA;AAAM,qBAAA;oBACH,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAChC,iBAAA;AACJ,aAAA;AACL,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,CAAa,KAAU;AACzC,YAAA,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAC9B,gBAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;gBACnD,IAAI,OAAO,GAAG,KAAK,CAAC;;AAGpB,gBAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;AAC1B,oBAAA,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3C,oBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAExD,IACI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa;AACjC,wBAAA,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC;AAC9B,wBAAA,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,EACvD;wBACE,IAAI,EAAE,GAAG,CAAC,EAAE;4BACR,IAAI,CAAC,GAAG,CAAC,QAAQ,CACb,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC;kCAC9D,KAAA;kCACA,QAAA,yBACR,CAAC;AACL,yBAAA;AAAM,6BAAA;4BACH,IAAI,CAAC,GAAG,CAAC,QAAQ,CACb,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC;kCAC9D,KAAA;kCACA,QAAA,yBACR,CAAC;AACL,yBAAA;wBACD,OAAO,GAAG,IAAI,CAAC;AAClB,qBAAA;AAED,oBAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC1B,iBAAA;gBAED,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACnC,aAAA;AACL,SAAC,CAAC;AApPE,QAAA,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;;AAErC,QAAA,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,kCAAkC,CAAC,CAAC;QAE7E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;AAEtD,QAAA,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AAEf,QAAA,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;;AAGrD,QAAA,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC;QACrD,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;AAEnD,QAAA,IAAI,OAAO,CAAC,IAAI,KAAA,OAAA,uBAAqB;AACjC,YAAA,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;YAClD,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;AACnD,SAAA;QAED,IAAI,OAAO,CAAC,QAAQ,EAAE;AAClB,YAAA,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;AAC7B,YAAA,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC;AACxD,SAAA;AAED,QAAA,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAEhC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AACxD,QAAA,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;KAC9C;AAED;;AAEG;IACI,OAAO,GAAA;AACV,QAAA,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,cAAc;YAAE,IAAI,CAAC,cAAc,EAAE,CAAC;AAEjE,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;AAC1B,QAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;KACzB;AAOD;;;;AAIG;IACI,cAAc,GAAA;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;AAED;;;;AAIG;IACI,UAAU,GAAA;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;AAED;;;;AAIG;AACI,IAAA,mBAAmB,CAAC,WAAwB,EAAA;QAC/C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;QAE3D,IAAI,WAAW,4CAA2B;AACtC,YAAA,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ;AAC/B,gBAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa;oBAC5B,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAK,IAAI,GAAG,GAAG,GAAG,CAAC;YAEnF,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ;AAC/B,gBAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa;oBAC5B,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,GAAG;AAC1E,wBAAA,GAAG,CAAC;YAEZ,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC7C,SAAA;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;KACjB;IAES,cAAc,GAAA;QACpB,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEpD,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACtE,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,MAAM,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3D;IAES,WAAW,GAAA;QACjB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,cAAc;YAAE,OAAO;QAEnD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACnE,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACvD,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE;YACnD,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,mBAAmB;AACvD,SAAA,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KACxD;AAED;;;;;AAKG;IACK,WAAW,CAAC,CAAS,EAAE,CAAS,EAAA;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;QAEtD,OAAO;AACH,YAAA,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI;AAChB,YAAA,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG;SAClB,CAAC;KACL;AAEO,IAAA,WAAW,CAAC,MAAmB,EAAA;QACnC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,iBAAiB;AAAE,YAAA,OAAO,IAAI,CAAC;AAE3D,QAAA,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAC,GAAG,EAAC,MAAM,CAAC,CAAC,QAAQ,CAAE,MAAsB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,EAAE;AACpF,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACf;AA6GJ;;ACpRD;;AAEG;AACG,MAAO,MAAO,SAAQ,EAAE,CAAA;AAC1B,IAAA,WAAA,CACI,OAAoB,EACpB,GAAa,EACb,OAAoB,EACpB,KAA8C,EAAA;AAE9C,QAAA,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;;QAG7B,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,YAAY,EAAE,gCAAgC,CAAC,CAAC;QAEhF,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;;AAExD,QAAA,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;AACtB,YAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACtC,SAAA;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;AAED;;;;AAIG;AACI,IAAA,WAAW,CAAC,KAA8C,EAAA;QAC7D,IAAI,CAAC,cAAc,EAAE,CAAC;AAEtB,QAAA,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,EAAE,CAAC;AAEhC,QAAA,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;AACtB,YAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACtC,SAAA;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAEM,MAAM,GAAA;QACT,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,CAAC;KACjC;AACJ;;AC5CD;;AAEG;AACG,MAAO,QAAS,SAAQ,EAAE,CAAA;AAG5B,IAAA,WAAA,CAAY,OAAoB,EAAE,GAAa,EAAE,OAAoB,EAAA;AACjE,QAAA,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAE7B,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,uCAAuC,CAAC;AAEjE,QAAA,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAEpD,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAEO,YAAY,GAAA;QAChB,MAAM,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACzC,QAAA,MAAM,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;AACzD,QAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;AAE3D,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;KAC/B;AAED;;AAEG;IACI,SAAS,GAAA;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAEM,MAAM,GAAA;QACT,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,CAAC;KACjC;AACJ;;AC1BD;;AAEG;MACmB,WAAW,CAAA;AAAjC,IAAA,WAAA,GAAA;AACY,QAAA,IAAA,CAAA,MAAM,GAAG,IAAI,GAAG,EAA2B,CAAC;KAkCvD;AAhCG;;;;;AAKG;IACI,EAAE,CAAC,SAAiB,EAAE,QAAuB,EAAA;QAChD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC1C,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7C,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACf;AAED;;;;AAIG;AACI,IAAA,GAAG,CAAC,KAAa,EAAA;AACpB,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KAC7B;AAES,IAAA,OAAO,CAAC,SAAiB,EAAE,GAAa,EAAE,OAAiB,IAAI,EAAA;QACrE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC;YAAE,OAAO;QAExC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC/C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACnC,SAAA;KACJ;AACJ;;AC/CD;;AAEG;AACG,MAAO,UAAW,SAAQ,MAAM,CAAA;AAYlC;;;;;;AAMG;AACH,IAAA,WAAA,CACI,GAAa,EACb,OAAoB,EACpB,OAAoB,EAAA;AAEpB,QAAA,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAjBhB,IAAW,CAAA,WAAA,GAAgB,IAAI,CAAC;QAChC,IAAW,CAAA,WAAA,GAAgB,IAAI,CAAC;QAChC,IAAU,CAAA,UAAA,GAAgB,IAAI,CAAC;QAC/B,IAAe,CAAA,eAAA,GAAgB,IAAI,CAAC;AAgBxC,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,aAAa,EAAE,CAAC;KACxB;IAEO,aAAa,GAAA;AACjB,QAAA,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAC3B,WAAW,EACX,CAAA;;;AAG0C,qDAAA,CAAA,CAC7C,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;KAC9E;IAEM,WAAW,GAAA;QACd,KAAK,CAAC,WAAW,EAAE,CAAC;QAEpB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC;QACjD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC;QAChD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC;KACxD;AAED;;AAEG;IACK,mBAAmB,GAAA;AACvB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE5B,MAAM,QAAQ,GACV,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEnF,IAAI,eAAe,GAAG,CAAC,CAAC,GAAG,GAAG,QAAQ,KAAK,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC;AAC7E,QAAA,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS;AAAE,YAAA,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC;AAEvE,QAAA,IAAI,QAAQ,GAAG,CAAA;;AAEA,qBAAA,EAAA,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;qBACnD,eAAe,CAAA;AACd,oBAAA,EAAA,IAAI,CAAC,MAAM,CAAA;;gCAED,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,QAAQ,IAAI,GAAG,CAAA;;AAElD,kBAAA,EAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;;SAErC,CAAC;QAEF,QAAQ;AACJ,YAAA,CAAC,IAAI,CAAC,YAAY,EAAE,KAA0B,CAAA,gCAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG;AAC5E,iBAAC,IAAI,CAAC,YAAY,EAAE,KAAuB,CAAA,6BAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC;AACvE,kBAAE,CAAkC,gCAAA,CAAA;kBAClC,kDAAkD,CAAC;QAE7D,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;KACjD;AAED;;AAEG;IACK,mBAAmB,GAAA;AACvB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE5B,MAAM,QAAQ,GACV,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEnF,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,QAAQ,KAAK,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC;AACxE,QAAA,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS;AAAE,YAAA,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;AAE7D,QAAA,IAAI,QAAQ,GAAG,CAAA;;AAEA,qBAAA,EAAA,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;qBACnD,UAAU,CAAA;AACT,oBAAA,EAAA,IAAI,CAAC,MAAM,CAAA;iEAEjB,IAAI,CAAC,MAAM,CAAC,OAChB,CAAA;AACQ,kBAAA,EAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;;SAErC,CAAC;QAEF,QAAQ;AACJ,YAAA,CAAC,IAAI,CAAC,YAAY,EAAE,KAA0B,CAAA,gCAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG;AAC5E,iBAAC,IAAI,CAAC,YAAY,EAAE,KAAuB,CAAA,6BAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC;AACvE,kBAAE,CAAkD,gDAAA,CAAA;kBAClD,kCAAkC,CAAC;QAE7C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;KAC5C;AAED;;AAEG;IACK,eAAe,GAAA;AACnB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAE5B,QAAA,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;AACpD,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,KAAA,CAAA,+BAA6B,eAAe,GAAG,CAAC,CAAC;AAE5F,QAAA,MAAM,eAAe,GACjB,IAAI,CAAC,YAAY,EAAE,KAAA,CAAA,+BAA6B,SAAS,GAAG,UAAU,CAAC;AAE3E,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAExD,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAEpD,QAAA,MAAM,IAAI,GAAG;YACT,IAAI,CAAC,QAAQ,CAAC,OAAO;YACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ;YACtB,IAAI,CAAC,QAAQ,CAAC,WAAW;YACzB,IAAI,CAAC,QAAQ,CAAC,UAAU;SAC3B,CAAC;QAEF,IAAI,OAAO,GAAG,WAAW,CAAC;AAC1B,QAAA,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;AAClB,YAAA,IAAI,CAAC,GACD,IAAI,CAAC,YAAY,EAAE,KAAuB,CAAA;AACtC,kBAAE;AACI,oBAAA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7B,iBAAA;AACH,kBAAE;oBACI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC1B,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC7B,CAAC;AAEZ,YAAA,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;AAErE,YAAA,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;AACzC,SAAA;QACD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,OAAO,IAAI,GAAG,CAAC;AAEf,QAAA,MAAM,QAAQ,GAAG,CAAA;;AAEF,qBAAA,EAAA,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;qBACpD,eAAe,CAAA;sBACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;0CACK,eAAe,CAAA;gCACzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA;;gCAEnB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA;;gCAEnB,eAAe,CAAA;qCACV,SAAS,CAAC,CAAC,GAAG,eAAe,CAAA,IAAA,EACtD,SAAS,CAAC,CAAC,GAAG,GAClB,CAAA,cAAA,EAAiB,KAAK,CAAA;yBACL,OAAO,CAAA;iCACC,OAAO,CAAA;SAC/B,CAAC;QAEF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;KAC7C;AAED;;AAEG;IACK,eAAe,GAAA;AACnB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAE5B,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAEvF,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AACpD,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,kCAA0B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;AAE3F,QAAA,MAAM,eAAe,GACjB,IAAI,CAAC,YAAY,EAAE,KAAA,CAAA,+BAA6B,UAAU,GAAG,SAAS,CAAC;AAE3E,QAAA,MAAM,IAAI,GAAG;AACT,YAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACd,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE;YAC3B,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE;YACrC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE;SAC3B,CAAC;QAEF,IAAI,OAAO,GAAG,WAAW,CAAC;AAC1B,QAAA,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;YAClB,IAAI,CAAC,KAAK,IAAI,EAAE;AACZ,gBAAA,IAAI,CAAC,GACD,IAAI,CAAC,YAAY,EAAE,KAAuB,CAAA;AACtC,sBAAE;AACI,wBAAA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7B,qBAAA;AACH,sBAAE;wBACI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBAC1B,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBAC7B,CAAC;AAEZ,gBAAA,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;AAErE,gBAAA,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;AACzC,aAAA;AACJ,SAAA;QAED,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,OAAO,IAAI,GAAG,CAAC;AAEf,QAAA,MAAM,QAAQ,GAAG,CAAA;;AAEF,qBAAA,EAAA,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;qBACpD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAA;sBAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;AACK,wCAAA,EAAA,eAAe,CAC7C,gBAAA,EAAA,IAAI,CAAC,MAAM,CAAC,OAChB,CAAA;gCACwB,eAAe,CAAA;qCACV,SAAS,CAAC,CAAC,GAAG,eAAe,CAAA,IAAA,EACtD,SAAS,CAAC,CAAC,GAAG,GAClB,CAAA,cAAA,EAAiB,KAAK,CAAA;yBACL,OAAO,CAAA;iCACC,OAAO,CAAA;SAC/B,CAAC;QAEF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;KAC7C;AAED;;AAEG;IACK,YAAY,GAAA;QAChB,IAAI,IAAI,CAAC,WAAW,KAAA,UAAA,+BAA6B,IAAI,CAAC,QAAQ,KAAK,IAAI;YAAE,OAAO;QAEhF,IACI,IAAI,CAAC,SAAS,KAAuB,CAAA;YACrC,IAAI,CAAC,YAAY,KAAK,IAAI;AAC1B,YAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,oCACvC;YACG,IAAI,CAAC,QAAqB,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CACpD,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,EACpC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEf,YAAA,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;AAC1E,YAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAC7D,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,8BAAsB,CAAC;AAClD,SAAA;KACJ;AAED;;AAEG;IACK,aAAa,GAAA;AACjB,QAAA,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI;YAAE,OAAO;QAEpC,IACI,IAAI,CAAC,SAAS,KAA0B,CAAA;YACxC,IAAI,CAAC,YAAY,KAAK,IAAI;AAC1B,YAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,oCACvC;YACG,IAAI,CAAC,SAAsB,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CACrD,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,EACpC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEf,YAAA,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;AAC3E,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAC9D,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,SAAS,CAAC,UAAU,+BAAuB,CAAC;AACpD,SAAA;KACJ;AAED;;AAEG;IACK,cAAc,GAAA;AAClB,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;YAAE,OAAO;QAErC,MAAM,WAAW,GACb,IAAI,CAAC,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC;AAE7E,QAAA,IAAI,EAAE,IAAI,CAAC,WAAW,KAAA,UAAA,+BAA6B,IAAI,CAAC,SAAS,KAAuB,CAAA,0BAAC,EAAE;YACtF,IAAI,CAAC,UAAuB,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CACtD,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,EACpC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEf,YAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACrC,SAAA;KACJ;IAES,SAAS,GAAA;QACf,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,cAAc,EAAE,CAAC;AAEtB,QAAA,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC1B,IAAI,CAAC,YAAyB,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CACxD,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,EACpC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEf,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAC5B,SAAA;QAED,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;AACnD,YAAA,IAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,oCAAuB;gBAC5D,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,eAAe,EAAE,CAAC;AAC1B,aAAA;AAAM,iBAAA;gBACH,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAC9B,aAAA;AACJ,SAAA;KACJ;IAEO,KAAK,GAAA;AACT,QAAA,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,QAAQ,EAAE,EAAE;AACxD,YAAA,IACI,IAAI,KAAK,IAAI,CAAC,QAAQ;gBACtB,IAAI,KAAK,IAAI,CAAC,SAAS;gBACvB,IAAI,KAAK,IAAI,CAAC,YAAY;AAC1B,gBAAA,IAAI,KAAK,IAAI,CAAC,UAAU,EAC1B;gBACG,IAAiB,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC;AACnE,aAAA;YAED,IAAI,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,YAAY,EAAE;gBAC/C,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC5B,aAAA;AACJ,SAAA;KACJ;IAEM,MAAM,GAAA;QACT,KAAK,CAAC,MAAM,EAAE,CAAC;AAEf,QAAA,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;AACzB,YAAA,IAAI,CAAC,SAAS,CAAC,cAAc,+BAAuB,CAAC;AACxD,SAAA;AAED,QAAA,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;AACxB,YAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,8BAAsB,CAAC;AACtD,SAAA;KACJ;AACJ;;MClUY,QAAQ,CAAA;AAArB,IAAA,WAAA,GAAA;AACY,QAAA,IAAA,CAAA,QAAQ,GAAgB;AAC5B,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,IAAI,EAAgB,OAAA;AACpB,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,MAAM,EAAE,CAAC;AACT,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,IAAI;AAChB,YAAA,YAAY,EAAE,IAAI;AAClB,YAAA,WAAW,EAAE,IAAI;AACjB,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,QAAQ,EAAE,IAAI;AACd,YAAA,gBAAgB,EAAE,CAAC;AACnB,YAAA,SAAS,EAAE,KAAK;AAChB,YAAA,mBAAmB,EAAE,IAAI;AACzB,YAAA,aAAa,EAAE,EAAE;AACjB,YAAA,iBAAiB,EAAE,IAAI;AACvB,YAAA,cAAc,EAAE,IAAI;SACvB,CAAC;KAsCL;AApCG;;;;;AAKG;AACI,IAAA,WAAW,CAAC,WAAsD,EAAA;AACrE,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC7B,QAAA,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEnC,IAAI,MAAM,CAAC,IAAI,KAAA,SAAA,2BAAyB,MAAM,CAAC,IAAI,KAAmB,OAAA;AAClE,YAAA,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;QAErF,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC;AACvC,YAAA,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;AAE/C,QAAA,IAAI,MAAM,CAAC,YAAY,IAAI,CAAC;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAE7C,QAAA,IAAI,MAAM,CAAC,IAAI,KAAA,SAAA,yBAAuB;AAClC,YAAA,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC;AAAE,gBAAA,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC;AAEhD,YAAA,IAAI,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ;AAAE,gBAAA,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;AAE9D,YAAA,IAAI,MAAM,CAAC,SAAS,IAAI,CAAC;AAAE,gBAAA,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;AAElD,YAAA,IAAI,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS;AAAE,gBAAA,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;AACpE,SAAA;AAAM,aAAA;AACH,YAAA,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC;AAC/B,YAAA,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC;AAC/B,YAAA,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;AACjC,YAAA,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;AACpC,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB;AACJ;;AClHD,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;AAC/B,EAAE,KAAK,GAAG,KAAK,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;AACjC,EAAE,IAAI,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;AAC9B;AACA,EAAE,IAAI,CAAC,GAAG,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE,EAAE,OAAO,EAAE;AAC1D;AACA,EAAE,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,EAAE,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC9C,EAAE,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC;AAC1B;AACA,EAAE,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC1B,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAChD,KAAK,MAAM;AACX,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AACL,GAAG,MAAM;AACT,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC5B,GAAG;AACH;AACA,EAAE,IAAI,KAAK,CAAC,UAAU,EAAE;AACxB,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,GAAG,GAAG,CAAC;AACnC,GAAG,MAAM;AACT,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD,GAAG;AACH;;;;;ACPA;;;;AAIG;AACG,MAAO,QAAS,SAAQ,WAAW,CAAA;AAcrC;;;;;;AAMG;IACH,WAAY,CAAA,OAAoB,EAAE,OAAkD,EAAA;AAChF,QAAA,KAAK,EAAE,CAAC;QApBJ,IAAW,CAAA,WAAA,GAAG,KAAK,CAAC;QACpB,IAAU,CAAA,UAAA,GAAG,KAAK,CAAC;QAEV,IAAO,CAAA,OAAA,GAAgB,IAAI,CAAC;QAGrC,IAAK,CAAA,KAAA,GAAmB,IAAI,CAAC;QAgBjC,IAAI,CAAC,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACnD,QAAA,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;KACxB;AAED;;AAEG;IACI,OAAO,GAAA;AACV,QAAA,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;AAClB,QAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;KACvB;AAED;;AAEG;IACI,MAAM,GAAA;AACT,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;AACrB,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;KACrB;AAED;;;;AAIG;AACI,IAAA,cAAc,CAAC,UAAoB,EAAA;AACtC,QAAA,IAAI,CAAC,EAAE,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvD,MAAM,MAAM,GAAI,IAAI,CAAC,EAAe,CAAC,SAAS,EAAE,CAAC;AACjD,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAE3D,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAElD,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAElB,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAEpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;QAGxC,UAAU,CAAC,MAAK;AACZ,YAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;AACjB,YAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE;AACvB,gBAAA,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;AAC5B,gBAAA,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;AACrC,aAAA,CAAC,CAAC;SACN,EAAE,CAAC,CAAC,CAAC;KACT;AAED;;;;AAIG;AACI,IAAA,YAAY,CAAC,KAA8C,EAAA;AAC9D,QAAA,IAAI,CAAC,EAAE,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAE5D,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC;AAE3E,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAElD,IAAI,CAAC,KAAK,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,EAAE,KAAK,CAAC,CAAC;AACxF,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAElB,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAEpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;QAGxC,UAAU,CAAC,MAAK;AACZ,YAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;AACjB,YAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE;AACvB,gBAAA,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;AAC5B,gBAAA,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;AACrC,aAAA,CAAC,CAAC;SACN,EAAE,CAAC,CAAC,CAAC;KACT;AAED;;;;AAIG;AACI,IAAA,gBAAgB,CAAC,UAAoB,EAAA;QACxC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;AAEjD,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;AACrB,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAElB,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACzB,QAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE;AACzB,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;AACrC,SAAA,CAAC,CAAC;KACN;AAED;;;;AAIG;AACI,IAAA,cAAc,CAAC,KAA8C,EAAA;QAChE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;AAEjD,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,EAAE,KAAK,CAAC,CAAC;AACxF,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AACjB,QAAA,IAAI,CAAC,EAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAEvC,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACzB,QAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE;AACzB,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;AACrC,SAAA,CAAC,CAAC;KACN;AAED;;AAEG;IACI,cAAc,GAAA;AACjB,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;KACzB;AAED;;AAEG;IACI,cAAc,GAAA;AACjB,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;KACzB;AAED;;;;AAIG;AACI,IAAA,UAAU,CAAC,IAAY,EAAA;AAC1B,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;AAED;;;;AAIG;AACI,IAAA,QAAQ,CAAC,MAAmC,GAAA,KAAA,uBAAA;AAC/C,QAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACxC;AAED;;;;AAIG;AACI,IAAA,QAAQ,CAAC,MAAmC,GAAA,KAAA,uBAAA;AAC/C,QAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACxC;AAED;;;;;AAKG;IACI,IAAI,CAAC,IAAY,EAAE,MAAmC,GAAA,KAAA,uBAAA;QACzD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAChD;AAED;;;;AAIG;AACI,IAAA,WAAW,CAAC,QAAuB,EAAA;QACtC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC/C;AAED;;;;AAIG;AACI,IAAA,eAAe,CAAC,OAAe,EAAA;QAClC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACvC;AAED;;;;AAIG;AACI,IAAA,iBAAiB,CAAC,cAA2B,EAAA;AAChD,QAAA,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;KAC3D;AAED;;;;AAIG;IACI,YAAY,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;KACpC;AAED;;;;AAIG;IACI,mBAAmB,GAAA;AACtB,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;KAC3C;AAED;;;;;AAKG;AACI,IAAA,OAAO,CAAC,SAAiB,EAAA;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KACxC;AAED;;;;AAIG;IACI,SAAS,GAAA;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;AAED;;;;AAIG;IACI,iBAAiB,GAAA;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC;KAC9B;AAED;;;;AAIG;IACI,cAAc,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;KACvC;AAED;;;;AAIG;IACI,aAAa,GAAA;AAChB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;KAChC;AAED;;;;AAIG;IACI,WAAW,GAAA;QACd,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;AAED;;;;AAIG;IACI,KAAK,GAAA;QACR,OAAO,IAAI,CAAC,EAAE,CAAC;KAClB;AAED;;;;AAIG;IACI,QAAQ,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;KACzC;AAED;;;;AAIG;IACI,iBAAiB,GAAA;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAED;;;;AAIG;AACI,IAAA,cAAc,CAAC,GAAU,EAAA;AAC5B,QAAA,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;AACzB,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KAC3B;AAED;;;;;AAKG;IACI,QAAQ,CAAC,GAAU,EAAE,OAAgB,EAAA;AACxC,QAAA,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACvC,SAAA;aAAM,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAA,IAAI,MAAM,CAAC,0BAA0B,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;AAChE,gBAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,gBAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC,aAAA;AACJ,SAAA;KACJ;AAED;;;;;AAKG;AACI,IAAA,QAAQ,CAAC,GAAU,EAAE,OAAO,GAAG,KAAK,EAAA;QACvC,IAAI,IAAI,CAAC,WAAW,EAAE;AAClB,YAAA,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAEzB,IAAI,CAAC,OAAO,EAAE;gBACV,IAAI,CAAC,IAAI,CAAC,UAAU;AAAE,oBAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAC/C,oBAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;AACvC,aAAA;AACJ,SAAA;KACJ;AACJ;;AClXD,MAAM,mBAAmB,GAAGA,yBAAK,CAAC,UAAU,CAC1C,CAAC,KAAU,EAAE,GAAqC,KAAI;AACpD,IAAA,MAAM,cAAc,GAAGC,YAAM,CAAiB,IAAI,CAAC,CAAC;AACpD,IAAA,MAAM,QAAQ,GAAGA,YAAM,CAAgB,EAAE,CAAC,CAAC;AAC3C,IAAA,MAAM,QAAQ,GAAGA,YAAM,EAAY,CAAC;IAEpC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAGC,cAAQ,CAAiB,EAAE,CAAC,CAAC;AAEvD,IAAAC,yBAAmB,CAAC,GAAG,EAAE,OAAY;AACnC,QAAA,QAAQ,EAAE,MAAM,QAAQ,CAAC,OAAO;AACjC,KAAA,CAAC,CAAC,CAAC;AAEJ,IAAA,MAAM,mBAAmB,GAAGC,iBAAW,CAAC,MAAK;QAC3C,IAAI,QAAQ,CAAC,OAAO,EAAE;AACpB,YAAA,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;AAC1B,SAAA;KACF,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,MAAM,cAAc,GAAGA,iBAAW,CAAC,MAAK;AACtC,QAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC;AAE9B,QAAA,IAAI,IAAI,EAAE;AACR,YAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACjB,YAAA,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAC9B,YAAA,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACxB,YAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACjB,YAAA,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACpB,SAAA;KACF,EAAE,EAAE,CAAC,CAAC;IAEPC,eAAS,CAAC,MAAK;AACb,QAAA,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC;QAEtB,IAAI,KAAK,CAAC,QAAQ,EAAE;AAClB,YAAA,MAAM,SAAS,GAAGL,yBAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,KAAI;AAC7D,gBAAA,OAAOA,yBAAK,CAAC,YAAY,CAAC,KAAqB,EAAE;AAC/C,oBAAA,GAAG,EAAE,CAAC,GAAG,KAAI;AACX,wBAAA,IAAI,GAAG,EAAE;AACP,4BAAA,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5B,yBAAA;qBACF;AACF,iBAAA,CAAC,CAAC;AACL,aAAC,CAAC,CAAC;AAEH,YAAA,IAAI,CAAC,KAAK,CAAC,0BAA0B,IAAI,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;AAC1E,gBAAA,IAAI,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE;AACnC,oBAAA,mBAAmB,EAAE,CAAC;AACvB,iBAAA;gBAED,QAAQ,CAAC,SAAS,CAAC,CAAC;AACrB,aAAA;AACF,SAAA;;AAEH,KAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAErBK,eAAS,CAAC,MAAK;QACb,MAAM,WAAW,GAAG,MAAK;AACvB,YAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC;AAE9B,YAAA,IAAI,IAAI,EAAE;gBACR,IAAI,KAAK,CAAC,MAAM,EAAE;AAChB,oBAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAU,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,iBAAA;gBAED,IAAI,KAAK,CAAC,mBAAmB,EAAE;AAC7B,oBAAA,IAAI,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,CAAU,KAAK,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,iBAAA;gBAED,IAAI,KAAK,CAAC,aAAa,EAAE;AACvB,oBAAA,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAU,KAAK,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,iBAAA;gBAED,IAAI,KAAK,CAAC,MAAM,EAAE;AAChB,oBAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAU,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,iBAAA;gBAED,IAAI,KAAK,CAAC,QAAQ,EAAE;AAClB,oBAAA,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAU,KAAK,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,iBAAA;AACF,aAAA;AACH,SAAC,CAAC;AAEF,QAAA,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACnD,YAAA,cAAc,EAAE,CAAC;YAEjB,IAAI,cAAc,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;AAC/C,gBAAA,QAAQ,CAAC,OAAO,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAChE,aAAA;AAED,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE;gBACzC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACjD,aAAA;AAAM,iBAAA;gBACL,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACnD,aAAA;AAED,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;;AAEH,KAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,QACEL,iDAAK,GAAG,EAAE,cAAc,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EACrE,EAAA,KAAK,CACF,EACN;AACJ,CAAC,CACF,CAAC;AAEW,MAAA,YAAY,GAAGA,yBAAK,CAAC,IAAI,CAAC,mBAAmB;;;;"}